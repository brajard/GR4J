
//----------------------------------------------------
// project: GR4J     header generated by YAO version 9.2.1.0
//----------------------------------------------------

#ifndef YAOPROJECT_GR4J_TRAJECTORY_TM_HPP_INCLUDED
#define YAOPROJECT_GR4J_TRAJECTORY_TM_HPP_INCLUDED
/*! 
 * \file TrajectoryTm.hpp
 * \brief Declaration of GR4J 's TrajectortTm trajectory
 * $Id$
 */
/*
Copyright or Â© or Copr. MMSA team, LOCEAN Paris (2011)

This software is a framework for variational data assimilation in
numerical models.

This software is governed by the CeCILL license under French law and
abiding by the rules of distribution of free software.  You can  use,
modify and/ or redistribute the software under the terms of the CeCILL
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info".

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability.

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or
data to be ensured and,  more generally, to use and operate it in the
same conditions as regards security.

The fact that you are presently reading this means that you have had
knowledge of the CeCILL license and that you accept its terms.

YAO website : http://www.locean-ipsl.upmc.fr/~yao/
Contact : yao@locean-ipsl.upmc.fr
*/

#include <string.h>
#include "Trajectory.hpp"

using namespace yaoProject;

namespace GR4J
{

class TrajectoryTm: public Trajectory
{
public:
  TrajectoryTm();

  int iterate_forward(int nbp);
  int iterate_backward(int nbp);
  int iterate_linward(int nbp);
  int iterate_dfward(int nbp);
  int iterate_forwardDual(int nbp);
  int iterate_linwardDual (int nbp);
};





// Implementation

TrajectoryTm::TrajectoryTm()
{
  strcpy (name, "Tm");
  type = 'M';
  nbuptime = 30;
  offtime = 0;
  dtime = 1.000000;
  curtime = 0.000000;
  toptime = 30;
  nbsteptime = 2386;
  stoptime = 2386.000000;
  isactiv = 1;
  YRobs = NULL;
  TRobs = NULL;

}

int TrajectoryTm::iterate_forward(int nbp)
{
	Ycurward=FORWARD;
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
// Begin forward 0
for(Yi=0; Yi<YA1_Sm; ++Yi)
{
	 Yting[0]=YS1_P( Yi, YTemps);
	 Yting[1]=YS1_E( Yi, YTemps);

	 YINTERC->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_X1( Yi);

	 YSX1->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 YPNX1->forward( Yting[0], Yting[1] );
	 Yting[0]=YS2_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 YENX1->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_PNX1( Yi, YTemps);

	 YtanhPS->forward( Yting[0] );
	 Yting[0]=YS1_ENX1( Yi, YTemps);

	 YtanhES->forward( Yting[0] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_SX1( Yi, YTemps);
	 Yting[2]=YS1_tanhPS( Yi, YTemps);
	 Yting[3]=YS1_tanhES( Yi, YTemps);
	 Yting[4]=YS1_X1( Yi);

	 YPS1->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_SX1( Yi, YTemps);
	 Yting[1]=YS1_tanhPS( Yi, YTemps);
	 Yting[2]=YS1_tanhES( Yi, YTemps);

	 YPS2->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_PS1( Yi, YTemps);
	 Yting[1]=YS2_PS1( Yi, YTemps);
	 Yting[2]=YS1_PS2( Yi, YTemps);
	 Yting[3]=YS2_PS2( Yi, YTemps);
	 Yting[4]=YS1_INTERC( Yi, YTemps);

	 YPS3->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS2_PS3( Yi, YTemps);

	 YMS1->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 YMS23->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS23( Yi, YTemps);

	 YMS21->forward( Yting[0] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS21( Yi, YTemps);

	 YMS24->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS24( Yi, YTemps);

	 YMS3->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS1_MS24( Yi, YTemps);

	 YPR->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);

	 YQ9->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);

	 YQ1->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yting[0]=YS1_R1( Yi, YTemps-1);
	 Yting[1]=YS1_X2( Yi);
	 Yting[2]=YS1_X3( Yi);

	 YF->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_R2( Yi, YTemps-1);
	 Yting[1]=YS1_Q9( Yi, YTemps);
	 Yting[2]=YS1_F( Yi, YTemps);

	 YRQ9F->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_RQ9F( Yi, YTemps);

	 YR1->forward( Yting[0] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_X3( Yi);

	 YRX3->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_RX3( Yi, YTemps);

	 YRX32->forward( Yting[0] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_RX32( Yi, YTemps);

	 YQR->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_QR( Yi, YTemps);

	 YR2->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_F( Yi, YTemps);

	 YQ1QF->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Q1QF( Yi, YTemps);

	 YQD->forward( Yting[0] );
	 Yting[0]=YS1_QR( Yi, YTemps);
	 Yting[1]=YS1_QD( Yi, YTemps);

	 YQS->forward( Yting[0], Yting[1] );

}
// End forward 1


  return (0);
}

int TrajectoryTm::iterate_backward(int nbp)

{
	Ycurward=BACKWARD;

	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
// Begin backward 0
for(Yi=YA1_Sm-1; Yi>=0; --Yi)
{
	 Yting[0]=YS1_QR( Yi, YTemps);
	 Yting[1]=YS1_QD( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQS->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_QS, YNBI_QS, YMAX_JAC_NBI, &YG1Y_QS, Yjac[0], Ytbeta);
	 YG1_QR( Yi, YTemps) += Ytbeta[0];
	 YG1_QD( Yi, YTemps) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_QR( Yi, YTemps);
			Yting[1]=YD1_QD( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_QS, &YG1Y_QS, YNBS_QS);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_QS);
			if (!Ytesterrad_mod((char *) "QS", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Q1QF( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQD->backward( Yting[0] );
	 Yvsmatt (YNBS_QD, YNBI_QD, YMAX_JAC_NBI, &YG1Y_QD, Yjac[0], Ytbeta);
	 YG1_Q1QF( Yi, YTemps) += Ytbeta[0];

	 if (Ytestad_module) {
			Yting[0]=YD1_Q1QF( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_QD, &YG1Y_QD, YNBS_QD);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_QD);
			if (!Ytesterrad_mod((char *) "QD", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_F( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQ1QF->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_Q1QF, YNBI_Q1QF, YMAX_JAC_NBI, &YG1Y_Q1QF, Yjac[0], Ytbeta);
	 YG1_Q1( Yi, YTemps) += Ytbeta[0];
	 YG1_F( Yi, YTemps) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_Q1( Yi, YTemps);
			Yting[1]=YD1_F( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_Q1QF, &YG1Y_Q1QF, YNBS_Q1QF);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q1QF);
			if (!Ytesterrad_mod((char *) "Q1QF", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_QR( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YR2->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_R2, YNBI_R2, YMAX_JAC_NBI, &YG1Y_R2, Yjac[0], Ytbeta);
	 YG1_R1( Yi, YTemps) += Ytbeta[0];
	 YG1_QR( Yi, YTemps) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_R1( Yi, YTemps);
			Yting[1]=YD1_QR( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_R2, &YG1Y_R2, YNBS_R2);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R2);
			if (!Ytesterrad_mod((char *) "R2", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_RX32( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQR->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_QR, YNBI_QR, YMAX_JAC_NBI, &YG1Y_QR, Yjac[0], Ytbeta);
	 YG1_R1( Yi, YTemps) += Ytbeta[0];
	 YG1_RX32( Yi, YTemps) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_R1( Yi, YTemps);
			Yting[1]=YD1_RX32( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_QR, &YG1Y_QR, YNBS_QR);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_QR);
			if (!Ytesterrad_mod((char *) "QR", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_RX3( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YRX32->backward( Yting[0] );
	 Yvsmatt (YNBS_RX32, YNBI_RX32, YMAX_JAC_NBI, &YG1Y_RX32, Yjac[0], Ytbeta);
	 YG1_RX3( Yi, YTemps) += Ytbeta[0];

	 if (Ytestad_module) {
			Yting[0]=YD1_RX3( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_RX32, &YG1Y_RX32, YNBS_RX32);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_RX32);
			if (!Ytesterrad_mod((char *) "RX32", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_X3( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YRX3->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_RX3, YNBI_RX3, YMAX_JAC_NBI, &YG1Y_RX3, Yjac[0], Ytbeta);
	 YG1_R1( Yi, YTemps) += Ytbeta[0];
	 YG1_X3( Yi) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_R1( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X3( Yi, 0);

			YLTRes = Yprosca(&YD1Y_RX3, &YG1Y_RX3, YNBS_RX3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_RX3);
			if (!Ytesterrad_mod((char *) "RX3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_RQ9F( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YR1->backward( Yting[0] );
	 Yvsmatt (YNBS_R1, YNBI_R1, YMAX_JAC_NBI, &YG1Y_R1, Yjac[0], Ytbeta);
	 YG1_RQ9F( Yi, YTemps) += Ytbeta[0];

	 if (Ytestad_module) {
			Yting[0]=YD1_RQ9F( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_R1, &YG1Y_R1, YNBS_R1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R1);
			if (!Ytesterrad_mod((char *) "R1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R2( Yi, YTemps-1);
	 Yting[1]=YS1_Q9( Yi, YTemps);
	 Yting[2]=YS1_F( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YRQ9F->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_RQ9F, YNBI_RQ9F, YMAX_JAC_NBI, &YG1Y_RQ9F, Yjac[0], Ytbeta);
	 YG1_R2( Yi, YTemps-1) += Ytbeta[0];
	 YG1_Q9( Yi, YTemps) += Ytbeta[1];
	 YG1_F( Yi, YTemps) += Ytbeta[2];

	 if (Ytestad_module) {
			Yting[0]=YD1_R2( Yi, YTemps-1);
			Yting[1]=YD1_Q9( Yi, YTemps);
			Yting[2]=YD1_F( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_RQ9F, &YG1Y_RQ9F, YNBS_RQ9F);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_RQ9F);
			if (!Ytesterrad_mod((char *) "RQ9F", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R1( Yi, YTemps-1);
	 Yting[1]=YS1_X2( Yi);
	 Yting[2]=YS1_X3( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YF->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_F, YNBI_F, YMAX_JAC_NBI, &YG1Y_F, Yjac[0], Ytbeta);
	 YG1_R1( Yi, YTemps-1) += Ytbeta[0];
	 YG1_X2( Yi) += Ytbeta[1];
	 YG1_X3( Yi) += Ytbeta[2];

	 if (Ytestad_module) {
			Yting[0]=YD1_R1( Yi, YTemps-1);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X2( Yi, 0);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[2]=YD1_X3( Yi, 0);

			YLTRes = Yprosca(&YD1Y_F, &YG1Y_F, YNBS_F);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_F);
			if (!Ytesterrad_mod((char *) "F", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQ1->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yvsmatt (YNBS_Q1, YNBI_Q1, YMAX_JAC_NBI, &YG1Y_Q1, Yjac[0], Ytbeta);
	 YG1_PR( Yi, YTemps) += Ytbeta[0];
	 YG1_PR( Yi, YTemps-1) += Ytbeta[1];
	 YG1_PR( Yi, YTemps-2) += Ytbeta[2];
	 YG1_PR( Yi, YTemps-3) += Ytbeta[3];
	 YG1_PR( Yi, YTemps-4) += Ytbeta[4];
	 YG1_PR( Yi, YTemps-5) += Ytbeta[5];
	 YG1_PR( Yi, YTemps-6) += Ytbeta[6];
	 YG1_PR( Yi, YTemps-7) += Ytbeta[7];
	 YG1_PR( Yi, YTemps-8) += Ytbeta[8];
	 YG1_PR( Yi, YTemps-9) += Ytbeta[9];
	 YG1_PR( Yi, YTemps-10) += Ytbeta[10];
	 YG1_PR( Yi, YTemps-11) += Ytbeta[11];
	 YG1_PR( Yi, YTemps-12) += Ytbeta[12];
	 YG1_PR( Yi, YTemps-13) += Ytbeta[13];
	 YG1_PR( Yi, YTemps-14) += Ytbeta[14];
	 YG1_PR( Yi, YTemps-15) += Ytbeta[15];
	 YG1_PR( Yi, YTemps-16) += Ytbeta[16];
	 YG1_PR( Yi, YTemps-17) += Ytbeta[17];
	 YG1_PR( Yi, YTemps-18) += Ytbeta[18];
	 YG1_PR( Yi, YTemps-19) += Ytbeta[19];
	 YG1_PR( Yi, YTemps-20) += Ytbeta[20];
	 YG1_PR( Yi, YTemps-21) += Ytbeta[21];
	 YG1_PR( Yi, YTemps-22) += Ytbeta[22];
	 YG1_PR( Yi, YTemps-23) += Ytbeta[23];
	 YG1_PR( Yi, YTemps-24) += Ytbeta[24];
	 YG1_PR( Yi, YTemps-25) += Ytbeta[25];
	 YG1_PR( Yi, YTemps-26) += Ytbeta[26];
	 YG1_PR( Yi, YTemps-27) += Ytbeta[27];
	 YG1_PR( Yi, YTemps-28) += Ytbeta[28];
	 YG1_PR( Yi, YTemps-29) += Ytbeta[29];
	 YG1_X4( Yi) += Ytbeta[30];

	 if (Ytestad_module) {
			Yting[0]=YD1_PR( Yi, YTemps);
			Yting[1]=YD1_PR( Yi, YTemps-1);
			Yting[2]=YD1_PR( Yi, YTemps-2);
			Yting[3]=YD1_PR( Yi, YTemps-3);
			Yting[4]=YD1_PR( Yi, YTemps-4);
			Yting[5]=YD1_PR( Yi, YTemps-5);
			Yting[6]=YD1_PR( Yi, YTemps-6);
			Yting[7]=YD1_PR( Yi, YTemps-7);
			Yting[8]=YD1_PR( Yi, YTemps-8);
			Yting[9]=YD1_PR( Yi, YTemps-9);
			Yting[10]=YD1_PR( Yi, YTemps-10);
			Yting[11]=YD1_PR( Yi, YTemps-11);
			Yting[12]=YD1_PR( Yi, YTemps-12);
			Yting[13]=YD1_PR( Yi, YTemps-13);
			Yting[14]=YD1_PR( Yi, YTemps-14);
			Yting[15]=YD1_PR( Yi, YTemps-15);
			Yting[16]=YD1_PR( Yi, YTemps-16);
			Yting[17]=YD1_PR( Yi, YTemps-17);
			Yting[18]=YD1_PR( Yi, YTemps-18);
			Yting[19]=YD1_PR( Yi, YTemps-19);
			Yting[20]=YD1_PR( Yi, YTemps-20);
			Yting[21]=YD1_PR( Yi, YTemps-21);
			Yting[22]=YD1_PR( Yi, YTemps-22);
			Yting[23]=YD1_PR( Yi, YTemps-23);
			Yting[24]=YD1_PR( Yi, YTemps-24);
			Yting[25]=YD1_PR( Yi, YTemps-25);
			Yting[26]=YD1_PR( Yi, YTemps-26);
			Yting[27]=YD1_PR( Yi, YTemps-27);
			Yting[28]=YD1_PR( Yi, YTemps-28);
			Yting[29]=YD1_PR( Yi, YTemps-29);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[30]=YD1_X4( Yi, 0);

			YLTRes = Yprosca(&YD1Y_Q1, &YG1Y_Q1, YNBS_Q1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q1);
			if (!Ytesterrad_mod((char *) "Q1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQ9->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yvsmatt (YNBS_Q9, YNBI_Q9, YMAX_JAC_NBI, &YG1Y_Q9, Yjac[0], Ytbeta);
	 YG1_PR( Yi, YTemps) += Ytbeta[0];
	 YG1_PR( Yi, YTemps-1) += Ytbeta[1];
	 YG1_PR( Yi, YTemps-2) += Ytbeta[2];
	 YG1_PR( Yi, YTemps-3) += Ytbeta[3];
	 YG1_PR( Yi, YTemps-4) += Ytbeta[4];
	 YG1_PR( Yi, YTemps-5) += Ytbeta[5];
	 YG1_PR( Yi, YTemps-6) += Ytbeta[6];
	 YG1_PR( Yi, YTemps-7) += Ytbeta[7];
	 YG1_PR( Yi, YTemps-8) += Ytbeta[8];
	 YG1_PR( Yi, YTemps-9) += Ytbeta[9];
	 YG1_PR( Yi, YTemps-10) += Ytbeta[10];
	 YG1_PR( Yi, YTemps-11) += Ytbeta[11];
	 YG1_PR( Yi, YTemps-12) += Ytbeta[12];
	 YG1_PR( Yi, YTemps-13) += Ytbeta[13];
	 YG1_PR( Yi, YTemps-14) += Ytbeta[14];
	 YG1_PR( Yi, YTemps-15) += Ytbeta[15];
	 YG1_PR( Yi, YTemps-16) += Ytbeta[16];
	 YG1_PR( Yi, YTemps-17) += Ytbeta[17];
	 YG1_PR( Yi, YTemps-18) += Ytbeta[18];
	 YG1_PR( Yi, YTemps-19) += Ytbeta[19];
	 YG1_PR( Yi, YTemps-20) += Ytbeta[20];
	 YG1_PR( Yi, YTemps-21) += Ytbeta[21];
	 YG1_PR( Yi, YTemps-22) += Ytbeta[22];
	 YG1_PR( Yi, YTemps-23) += Ytbeta[23];
	 YG1_PR( Yi, YTemps-24) += Ytbeta[24];
	 YG1_PR( Yi, YTemps-25) += Ytbeta[25];
	 YG1_PR( Yi, YTemps-26) += Ytbeta[26];
	 YG1_PR( Yi, YTemps-27) += Ytbeta[27];
	 YG1_PR( Yi, YTemps-28) += Ytbeta[28];
	 YG1_PR( Yi, YTemps-29) += Ytbeta[29];
	 YG1_X4( Yi) += Ytbeta[30];

	 if (Ytestad_module) {
			Yting[0]=YD1_PR( Yi, YTemps);
			Yting[1]=YD1_PR( Yi, YTemps-1);
			Yting[2]=YD1_PR( Yi, YTemps-2);
			Yting[3]=YD1_PR( Yi, YTemps-3);
			Yting[4]=YD1_PR( Yi, YTemps-4);
			Yting[5]=YD1_PR( Yi, YTemps-5);
			Yting[6]=YD1_PR( Yi, YTemps-6);
			Yting[7]=YD1_PR( Yi, YTemps-7);
			Yting[8]=YD1_PR( Yi, YTemps-8);
			Yting[9]=YD1_PR( Yi, YTemps-9);
			Yting[10]=YD1_PR( Yi, YTemps-10);
			Yting[11]=YD1_PR( Yi, YTemps-11);
			Yting[12]=YD1_PR( Yi, YTemps-12);
			Yting[13]=YD1_PR( Yi, YTemps-13);
			Yting[14]=YD1_PR( Yi, YTemps-14);
			Yting[15]=YD1_PR( Yi, YTemps-15);
			Yting[16]=YD1_PR( Yi, YTemps-16);
			Yting[17]=YD1_PR( Yi, YTemps-17);
			Yting[18]=YD1_PR( Yi, YTemps-18);
			Yting[19]=YD1_PR( Yi, YTemps-19);
			Yting[20]=YD1_PR( Yi, YTemps-20);
			Yting[21]=YD1_PR( Yi, YTemps-21);
			Yting[22]=YD1_PR( Yi, YTemps-22);
			Yting[23]=YD1_PR( Yi, YTemps-23);
			Yting[24]=YD1_PR( Yi, YTemps-24);
			Yting[25]=YD1_PR( Yi, YTemps-25);
			Yting[26]=YD1_PR( Yi, YTemps-26);
			Yting[27]=YD1_PR( Yi, YTemps-27);
			Yting[28]=YD1_PR( Yi, YTemps-28);
			Yting[29]=YD1_PR( Yi, YTemps-29);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[30]=YD1_X4( Yi, 0);

			YLTRes = Yprosca(&YD1Y_Q9, &YG1Y_Q9, YNBS_Q9);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q9);
			if (!Ytesterrad_mod((char *) "Q9", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS1_MS24( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YPR->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_PR, YNBI_PR, YMAX_JAC_NBI, &YG1Y_PR, Yjac[0], Ytbeta);
	 YG1_INTERC( Yi, YTemps) += Ytbeta[0];
	 YG1_PS3( Yi, YTemps) += Ytbeta[1];
	 YG1_MS24( Yi, YTemps) += Ytbeta[2];

	 if (Ytestad_module) {
			Yting[0]=YD1_INTERC( Yi, YTemps);
			Yting[1]=YD1_PS3( Yi, YTemps);
			Yting[2]=YD1_MS24( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_PR, &YG1Y_PR, YNBS_PR);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PR);
			if (!Ytesterrad_mod((char *) "PR", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS24( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS3->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_MS3, YNBI_MS3, YMAX_JAC_NBI, &YG1Y_MS3, Yjac[0], Ytbeta);
	 YG1_MS1( Yi, YTemps) += Ytbeta[0];
	 YG1_MS24( Yi, YTemps) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_MS1( Yi, YTemps);
			Yting[1]=YD1_MS24( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_MS3, &YG1Y_MS3, YNBS_MS3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS3);
			if (!Ytesterrad_mod((char *) "MS3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS21( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS24->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_MS24, YNBI_MS24, YMAX_JAC_NBI, &YG1Y_MS24, Yjac[0], Ytbeta);
	 YG1_MS1( Yi, YTemps) += Ytbeta[0];
	 YG1_MS21( Yi, YTemps) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_MS1( Yi, YTemps);
			Yting[1]=YD1_MS21( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_MS24, &YG1Y_MS24, YNBS_MS24);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS24);
			if (!Ytesterrad_mod((char *) "MS24", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS23( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS21->backward( Yting[0] );
	 Yvsmatt (YNBS_MS21, YNBI_MS21, YMAX_JAC_NBI, &YG1Y_MS21, Yjac[0], Ytbeta);
	 YG1_MS23( Yi, YTemps) += Ytbeta[0];

	 if (Ytestad_module) {
			Yting[0]=YD1_MS23( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_MS21, &YG1Y_MS21, YNBS_MS21);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS21);
			if (!Ytesterrad_mod((char *) "MS21", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS23->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_MS23, YNBI_MS23, YMAX_JAC_NBI, &YG1Y_MS23, Yjac[0], Ytbeta);
	 YG1_MS1( Yi, YTemps) += Ytbeta[0];
	 YG1_X1( Yi) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_MS1( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X1( Yi, 0);

			YLTRes = Yprosca(&YD1Y_MS23, &YG1Y_MS23, YNBS_MS23);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS23);
			if (!Ytesterrad_mod((char *) "MS23", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS2_PS3( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS1->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_MS1, YNBI_MS1, YMAX_JAC_NBI, &YG1Y_MS1, Yjac[0], Ytbeta);
	 YG1_MS3( Yi, YTemps-1) += Ytbeta[0];
	 YG1_PS3( Yi, YTemps) += Ytbeta[1];
	 YG2_PS3( Yi, YTemps) += Ytbeta[2];

	 if (Ytestad_module) {
			Yting[0]=YD1_MS3( Yi, YTemps-1);
			Yting[1]=YD1_PS3( Yi, YTemps);
			Yting[2]=YD2_PS3( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_MS1, &YG1Y_MS1, YNBS_MS1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS1);
			if (!Ytesterrad_mod((char *) "MS1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PS1( Yi, YTemps);
	 Yting[1]=YS2_PS1( Yi, YTemps);
	 Yting[2]=YS1_PS2( Yi, YTemps);
	 Yting[3]=YS2_PS2( Yi, YTemps);
	 Yting[4]=YS1_INTERC( Yi, YTemps);

	 for(int i=0; i<62;i++)
		 Yjac[0][i]=0;
	 YPS3->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmatt (YNBS_PS3, YNBI_PS3, YMAX_JAC_NBI, &YG1Y_PS3, Yjac[0], Ytbeta);
	 YG1_PS1( Yi, YTemps) += Ytbeta[0];
	 YG2_PS1( Yi, YTemps) += Ytbeta[1];
	 YG1_PS2( Yi, YTemps) += Ytbeta[2];
	 YG2_PS2( Yi, YTemps) += Ytbeta[3];
	 YG1_INTERC( Yi, YTemps) += Ytbeta[4];

	 if (Ytestad_module) {
			Yting[0]=YD1_PS1( Yi, YTemps);
			Yting[1]=YD2_PS1( Yi, YTemps);
			Yting[2]=YD1_PS2( Yi, YTemps);
			Yting[3]=YD2_PS2( Yi, YTemps);
			Yting[4]=YD1_INTERC( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_PS3, &YG1Y_PS3, YNBS_PS3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PS3);
			if (!Ytesterrad_mod((char *) "PS3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_SX1( Yi, YTemps);
	 Yting[1]=YS1_tanhPS( Yi, YTemps);
	 Yting[2]=YS1_tanhES( Yi, YTemps);

	 for(int i=0; i<62;i++)
		 Yjac[0][i]=0;
	 YPS2->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_PS2, YNBI_PS2, YMAX_JAC_NBI, &YG1Y_PS2, Yjac[0], Ytbeta);
	 YG1_SX1( Yi, YTemps) += Ytbeta[0];
	 YG1_tanhPS( Yi, YTemps) += Ytbeta[1];
	 YG1_tanhES( Yi, YTemps) += Ytbeta[2];

	 if (Ytestad_module) {
			Yting[0]=YD1_SX1( Yi, YTemps);
			Yting[1]=YD1_tanhPS( Yi, YTemps);
			Yting[2]=YD1_tanhES( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_PS2, &YG1Y_PS2, YNBS_PS2);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PS2);
			if (!Ytesterrad_mod((char *) "PS2", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_SX1( Yi, YTemps);
	 Yting[2]=YS1_tanhPS( Yi, YTemps);
	 Yting[3]=YS1_tanhES( Yi, YTemps);
	 Yting[4]=YS1_X1( Yi);

	 for(int i=0; i<62;i++)
		 Yjac[0][i]=0;
	 YPS1->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmatt (YNBS_PS1, YNBI_PS1, YMAX_JAC_NBI, &YG1Y_PS1, Yjac[0], Ytbeta);
	 YG1_MS3( Yi, YTemps-1) += Ytbeta[0];
	 YG1_SX1( Yi, YTemps) += Ytbeta[1];
	 YG1_tanhPS( Yi, YTemps) += Ytbeta[2];
	 YG1_tanhES( Yi, YTemps) += Ytbeta[3];
	 YG1_X1( Yi) += Ytbeta[4];

	 if (Ytestad_module) {
			Yting[0]=YD1_MS3( Yi, YTemps-1);
			Yting[1]=YD1_SX1( Yi, YTemps);
			Yting[2]=YD1_tanhPS( Yi, YTemps);
			Yting[3]=YD1_tanhES( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[4]=YD1_X1( Yi, 0);

			YLTRes = Yprosca(&YD1Y_PS1, &YG1Y_PS1, YNBS_PS1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PS1);
			if (!Ytesterrad_mod((char *) "PS1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_ENX1( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YtanhES->backward( Yting[0] );
	 Yvsmatt (YNBS_tanhES, YNBI_tanhES, YMAX_JAC_NBI, &YG1Y_tanhES, Yjac[0], Ytbeta);
	 YG1_ENX1( Yi, YTemps) += Ytbeta[0];

	 if (Ytestad_module) {
			Yting[0]=YD1_ENX1( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_tanhES, &YG1Y_tanhES, YNBS_tanhES);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_tanhES);
			if (!Ytesterrad_mod((char *) "tanhES", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PNX1( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YtanhPS->backward( Yting[0] );
	 Yvsmatt (YNBS_tanhPS, YNBI_tanhPS, YMAX_JAC_NBI, &YG1Y_tanhPS, Yjac[0], Ytbeta);
	 YG1_PNX1( Yi, YTemps) += Ytbeta[0];

	 if (Ytestad_module) {
			Yting[0]=YD1_PNX1( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_tanhPS, &YG1Y_tanhPS, YNBS_tanhPS);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_tanhPS);
			if (!Ytesterrad_mod((char *) "tanhPS", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS2_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YENX1->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_ENX1, YNBI_ENX1, YMAX_JAC_NBI, &YG1Y_ENX1, Yjac[0], Ytbeta);
	 YG2_INTERC( Yi, YTemps) += Ytbeta[0];
	 YG1_X1( Yi) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD2_INTERC( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X1( Yi, 0);

			YLTRes = Yprosca(&YD1Y_ENX1, &YG1Y_ENX1, YNBS_ENX1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_ENX1);
			if (!Ytesterrad_mod((char *) "ENX1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YPNX1->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_PNX1, YNBI_PNX1, YMAX_JAC_NBI, &YG1Y_PNX1, Yjac[0], Ytbeta);
	 YG1_INTERC( Yi, YTemps) += Ytbeta[0];
	 YG1_X1( Yi) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_INTERC( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X1( Yi, 0);

			YLTRes = Yprosca(&YD1Y_PNX1, &YG1Y_PNX1, YNBS_PNX1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PNX1);
			if (!Ytesterrad_mod((char *) "PNX1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_X1( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YSX1->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_SX1, YNBI_SX1, YMAX_JAC_NBI, &YG1Y_SX1, Yjac[0], Ytbeta);
	 YG1_MS3( Yi, YTemps-1) += Ytbeta[0];
	 YG1_X1( Yi) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_MS3( Yi, YTemps-1);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X1( Yi, 0);

			YLTRes = Yprosca(&YD1Y_SX1, &YG1Y_SX1, YNBS_SX1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_SX1);
			if (!Ytesterrad_mod((char *) "SX1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_P( Yi, YTemps);
	 Yting[1]=YS1_E( Yi, YTemps);

	 for(int i=0; i<62;i++)
		 Yjac[0][i]=0;
	 YINTERC->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_INTERC, YNBI_INTERC, YMAX_JAC_NBI, &YG1Y_INTERC, Yjac[0], Ytbeta);
	 YG1_P( Yi, YTemps) += Ytbeta[0];
	 YG1_E( Yi, YTemps) += Ytbeta[1];

	 if (Ytestad_module) {
			Yting[0]=YD1_P( Yi, YTemps);
			Yting[1]=YD1_E( Yi, YTemps);

			YLTRes = Yprosca(&YD1Y_INTERC, &YG1Y_INTERC, YNBS_INTERC);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_INTERC);
			if (!Ytesterrad_mod((char *) "INTERC", YLTRes,YAdRes)) return(0);
	 }

}
// End backward 1


  return (0);
}

int TrajectoryTm::iterate_linward (int nbp)
{
	Ycurward=LINWARD;

	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=0; Yi<YA1_Sm; ++Yi)
{
	 Yting[0]=YS1_P( Yi, YTemps);
	 Yting[1]=YS1_E( Yi, YTemps);

	 Ytbeta[0]=YG1_P( Yi, YTemps);
	 Ytbeta[1]=YG1_E( Yi, YTemps);

	 for(int i=0; i<62;i++)
		 Yjac[0][i]=0;
	 YINTERC->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_INTERC, YNBI_INTERC, YMAX_JAC_NBI, &YG1Y_INTERC, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_INTERC, &YG1Y_INTERC, YNBS_INTERC*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_X1( Yi);

	 Ytbeta[0]=YG1_MS3( Yi, YTemps-1);
	 Ytbeta[1]=YG1_X1( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YSX1->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_SX1, YNBI_SX1, YMAX_JAC_NBI, &YG1Y_SX1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_SX1, &YG1Y_SX1, YNBS_SX1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 Ytbeta[0]=YG1_INTERC( Yi, YTemps);
	 Ytbeta[1]=YG1_X1( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YPNX1->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_PNX1, YNBI_PNX1, YMAX_JAC_NBI, &YG1Y_PNX1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PNX1, &YG1Y_PNX1, YNBS_PNX1*sizeof(YREAL));
	 }
	 Yting[0]=YS2_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 Ytbeta[0]=YG2_INTERC( Yi, YTemps);
	 Ytbeta[1]=YG1_X1( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YENX1->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_ENX1, YNBI_ENX1, YMAX_JAC_NBI, &YG1Y_ENX1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_ENX1, &YG1Y_ENX1, YNBS_ENX1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_PNX1( Yi, YTemps);

	 Ytbeta[0]=YG1_PNX1( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YtanhPS->backward( Yting[0] );
	 Yvsmat (YNBS_tanhPS, YNBI_tanhPS, YMAX_JAC_NBI, &YG1Y_tanhPS, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_tanhPS, &YG1Y_tanhPS, YNBS_tanhPS*sizeof(YREAL));
	 }
	 Yting[0]=YS1_ENX1( Yi, YTemps);

	 Ytbeta[0]=YG1_ENX1( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YtanhES->backward( Yting[0] );
	 Yvsmat (YNBS_tanhES, YNBI_tanhES, YMAX_JAC_NBI, &YG1Y_tanhES, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_tanhES, &YG1Y_tanhES, YNBS_tanhES*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_SX1( Yi, YTemps);
	 Yting[2]=YS1_tanhPS( Yi, YTemps);
	 Yting[3]=YS1_tanhES( Yi, YTemps);
	 Yting[4]=YS1_X1( Yi);

	 Ytbeta[0]=YG1_MS3( Yi, YTemps-1);
	 Ytbeta[1]=YG1_SX1( Yi, YTemps);
	 Ytbeta[2]=YG1_tanhPS( Yi, YTemps);
	 Ytbeta[3]=YG1_tanhES( Yi, YTemps);
	 Ytbeta[4]=YG1_X1( Yi);

	 for(int i=0; i<62;i++)
		 Yjac[0][i]=0;
	 YPS1->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmat (YNBS_PS1, YNBI_PS1, YMAX_JAC_NBI, &YG1Y_PS1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PS1, &YG1Y_PS1, YNBS_PS1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_SX1( Yi, YTemps);
	 Yting[1]=YS1_tanhPS( Yi, YTemps);
	 Yting[2]=YS1_tanhES( Yi, YTemps);

	 Ytbeta[0]=YG1_SX1( Yi, YTemps);
	 Ytbeta[1]=YG1_tanhPS( Yi, YTemps);
	 Ytbeta[2]=YG1_tanhES( Yi, YTemps);

	 for(int i=0; i<62;i++)
		 Yjac[0][i]=0;
	 YPS2->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_PS2, YNBI_PS2, YMAX_JAC_NBI, &YG1Y_PS2, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PS2, &YG1Y_PS2, YNBS_PS2*sizeof(YREAL));
	 }
	 Yting[0]=YS1_PS1( Yi, YTemps);
	 Yting[1]=YS2_PS1( Yi, YTemps);
	 Yting[2]=YS1_PS2( Yi, YTemps);
	 Yting[3]=YS2_PS2( Yi, YTemps);
	 Yting[4]=YS1_INTERC( Yi, YTemps);

	 Ytbeta[0]=YG1_PS1( Yi, YTemps);
	 Ytbeta[1]=YG2_PS1( Yi, YTemps);
	 Ytbeta[2]=YG1_PS2( Yi, YTemps);
	 Ytbeta[3]=YG2_PS2( Yi, YTemps);
	 Ytbeta[4]=YG1_INTERC( Yi, YTemps);

	 for(int i=0; i<62;i++)
		 Yjac[0][i]=0;
	 YPS3->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmat (YNBS_PS3, YNBI_PS3, YMAX_JAC_NBI, &YG1Y_PS3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PS3, &YG1Y_PS3, YNBS_PS3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS2_PS3( Yi, YTemps);

	 Ytbeta[0]=YG1_MS3( Yi, YTemps-1);
	 Ytbeta[1]=YG1_PS3( Yi, YTemps);
	 Ytbeta[2]=YG2_PS3( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS1->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_MS1, YNBI_MS1, YMAX_JAC_NBI, &YG1Y_MS1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS1, &YG1Y_MS1, YNBS_MS1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);

	 Ytbeta[0]=YG1_MS1( Yi, YTemps);
	 Ytbeta[1]=YG1_X1( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS23->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_MS23, YNBI_MS23, YMAX_JAC_NBI, &YG1Y_MS23, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS23, &YG1Y_MS23, YNBS_MS23*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS23( Yi, YTemps);

	 Ytbeta[0]=YG1_MS23( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS21->backward( Yting[0] );
	 Yvsmat (YNBS_MS21, YNBI_MS21, YMAX_JAC_NBI, &YG1Y_MS21, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS21, &YG1Y_MS21, YNBS_MS21*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS21( Yi, YTemps);

	 Ytbeta[0]=YG1_MS1( Yi, YTemps);
	 Ytbeta[1]=YG1_MS21( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS24->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_MS24, YNBI_MS24, YMAX_JAC_NBI, &YG1Y_MS24, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS24, &YG1Y_MS24, YNBS_MS24*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS24( Yi, YTemps);

	 Ytbeta[0]=YG1_MS1( Yi, YTemps);
	 Ytbeta[1]=YG1_MS24( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YMS3->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_MS3, YNBI_MS3, YMAX_JAC_NBI, &YG1Y_MS3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS3, &YG1Y_MS3, YNBS_MS3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS1_MS24( Yi, YTemps);

	 Ytbeta[0]=YG1_INTERC( Yi, YTemps);
	 Ytbeta[1]=YG1_PS3( Yi, YTemps);
	 Ytbeta[2]=YG1_MS24( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YPR->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_PR, YNBI_PR, YMAX_JAC_NBI, &YG1Y_PR, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PR, &YG1Y_PR, YNBS_PR*sizeof(YREAL));
	 }
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);

	 Ytbeta[0]=YG1_PR( Yi, YTemps);
	 Ytbeta[1]=YG1_PR( Yi, YTemps-1);
	 Ytbeta[2]=YG1_PR( Yi, YTemps-2);
	 Ytbeta[3]=YG1_PR( Yi, YTemps-3);
	 Ytbeta[4]=YG1_PR( Yi, YTemps-4);
	 Ytbeta[5]=YG1_PR( Yi, YTemps-5);
	 Ytbeta[6]=YG1_PR( Yi, YTemps-6);
	 Ytbeta[7]=YG1_PR( Yi, YTemps-7);
	 Ytbeta[8]=YG1_PR( Yi, YTemps-8);
	 Ytbeta[9]=YG1_PR( Yi, YTemps-9);
	 Ytbeta[10]=YG1_PR( Yi, YTemps-10);
	 Ytbeta[11]=YG1_PR( Yi, YTemps-11);
	 Ytbeta[12]=YG1_PR( Yi, YTemps-12);
	 Ytbeta[13]=YG1_PR( Yi, YTemps-13);
	 Ytbeta[14]=YG1_PR( Yi, YTemps-14);
	 Ytbeta[15]=YG1_PR( Yi, YTemps-15);
	 Ytbeta[16]=YG1_PR( Yi, YTemps-16);
	 Ytbeta[17]=YG1_PR( Yi, YTemps-17);
	 Ytbeta[18]=YG1_PR( Yi, YTemps-18);
	 Ytbeta[19]=YG1_PR( Yi, YTemps-19);
	 Ytbeta[20]=YG1_PR( Yi, YTemps-20);
	 Ytbeta[21]=YG1_PR( Yi, YTemps-21);
	 Ytbeta[22]=YG1_PR( Yi, YTemps-22);
	 Ytbeta[23]=YG1_PR( Yi, YTemps-23);
	 Ytbeta[24]=YG1_PR( Yi, YTemps-24);
	 Ytbeta[25]=YG1_PR( Yi, YTemps-25);
	 Ytbeta[26]=YG1_PR( Yi, YTemps-26);
	 Ytbeta[27]=YG1_PR( Yi, YTemps-27);
	 Ytbeta[28]=YG1_PR( Yi, YTemps-28);
	 Ytbeta[29]=YG1_PR( Yi, YTemps-29);
	 Ytbeta[30]=YG1_X4( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQ9->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yvsmat (YNBS_Q9, YNBI_Q9, YMAX_JAC_NBI, &YG1Y_Q9, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q9, &YG1Y_Q9, YNBS_Q9*sizeof(YREAL));
	 }
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);

	 Ytbeta[0]=YG1_PR( Yi, YTemps);
	 Ytbeta[1]=YG1_PR( Yi, YTemps-1);
	 Ytbeta[2]=YG1_PR( Yi, YTemps-2);
	 Ytbeta[3]=YG1_PR( Yi, YTemps-3);
	 Ytbeta[4]=YG1_PR( Yi, YTemps-4);
	 Ytbeta[5]=YG1_PR( Yi, YTemps-5);
	 Ytbeta[6]=YG1_PR( Yi, YTemps-6);
	 Ytbeta[7]=YG1_PR( Yi, YTemps-7);
	 Ytbeta[8]=YG1_PR( Yi, YTemps-8);
	 Ytbeta[9]=YG1_PR( Yi, YTemps-9);
	 Ytbeta[10]=YG1_PR( Yi, YTemps-10);
	 Ytbeta[11]=YG1_PR( Yi, YTemps-11);
	 Ytbeta[12]=YG1_PR( Yi, YTemps-12);
	 Ytbeta[13]=YG1_PR( Yi, YTemps-13);
	 Ytbeta[14]=YG1_PR( Yi, YTemps-14);
	 Ytbeta[15]=YG1_PR( Yi, YTemps-15);
	 Ytbeta[16]=YG1_PR( Yi, YTemps-16);
	 Ytbeta[17]=YG1_PR( Yi, YTemps-17);
	 Ytbeta[18]=YG1_PR( Yi, YTemps-18);
	 Ytbeta[19]=YG1_PR( Yi, YTemps-19);
	 Ytbeta[20]=YG1_PR( Yi, YTemps-20);
	 Ytbeta[21]=YG1_PR( Yi, YTemps-21);
	 Ytbeta[22]=YG1_PR( Yi, YTemps-22);
	 Ytbeta[23]=YG1_PR( Yi, YTemps-23);
	 Ytbeta[24]=YG1_PR( Yi, YTemps-24);
	 Ytbeta[25]=YG1_PR( Yi, YTemps-25);
	 Ytbeta[26]=YG1_PR( Yi, YTemps-26);
	 Ytbeta[27]=YG1_PR( Yi, YTemps-27);
	 Ytbeta[28]=YG1_PR( Yi, YTemps-28);
	 Ytbeta[29]=YG1_PR( Yi, YTemps-29);
	 Ytbeta[30]=YG1_X4( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQ1->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yvsmat (YNBS_Q1, YNBI_Q1, YMAX_JAC_NBI, &YG1Y_Q1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q1, &YG1Y_Q1, YNBS_Q1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R1( Yi, YTemps-1);
	 Yting[1]=YS1_X2( Yi);
	 Yting[2]=YS1_X3( Yi);

	 Ytbeta[0]=YG1_R1( Yi, YTemps-1);
	 Ytbeta[1]=YG1_X2( Yi);
	 Ytbeta[2]=YG1_X3( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YF->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_F, YNBI_F, YMAX_JAC_NBI, &YG1Y_F, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_F, &YG1Y_F, YNBS_F*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R2( Yi, YTemps-1);
	 Yting[1]=YS1_Q9( Yi, YTemps);
	 Yting[2]=YS1_F( Yi, YTemps);

	 Ytbeta[0]=YG1_R2( Yi, YTemps-1);
	 Ytbeta[1]=YG1_Q9( Yi, YTemps);
	 Ytbeta[2]=YG1_F( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YRQ9F->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_RQ9F, YNBI_RQ9F, YMAX_JAC_NBI, &YG1Y_RQ9F, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_RQ9F, &YG1Y_RQ9F, YNBS_RQ9F*sizeof(YREAL));
	 }
	 Yting[0]=YS1_RQ9F( Yi, YTemps);

	 Ytbeta[0]=YG1_RQ9F( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YR1->backward( Yting[0] );
	 Yvsmat (YNBS_R1, YNBI_R1, YMAX_JAC_NBI, &YG1Y_R1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R1, &YG1Y_R1, YNBS_R1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_X3( Yi);

	 Ytbeta[0]=YG1_R1( Yi, YTemps);
	 Ytbeta[1]=YG1_X3( Yi);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YRX3->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_RX3, YNBI_RX3, YMAX_JAC_NBI, &YG1Y_RX3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_RX3, &YG1Y_RX3, YNBS_RX3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_RX3( Yi, YTemps);

	 Ytbeta[0]=YG1_RX3( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YRX32->backward( Yting[0] );
	 Yvsmat (YNBS_RX32, YNBI_RX32, YMAX_JAC_NBI, &YG1Y_RX32, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_RX32, &YG1Y_RX32, YNBS_RX32*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_RX32( Yi, YTemps);

	 Ytbeta[0]=YG1_R1( Yi, YTemps);
	 Ytbeta[1]=YG1_RX32( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQR->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_QR, YNBI_QR, YMAX_JAC_NBI, &YG1Y_QR, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_QR, &YG1Y_QR, YNBS_QR*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_QR( Yi, YTemps);

	 Ytbeta[0]=YG1_R1( Yi, YTemps);
	 Ytbeta[1]=YG1_QR( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YR2->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_R2, YNBI_R2, YMAX_JAC_NBI, &YG1Y_R2, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R2, &YG1Y_R2, YNBS_R2*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_F( Yi, YTemps);

	 Ytbeta[0]=YG1_Q1( Yi, YTemps);
	 Ytbeta[1]=YG1_F( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQ1QF->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_Q1QF, YNBI_Q1QF, YMAX_JAC_NBI, &YG1Y_Q1QF, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q1QF, &YG1Y_Q1QF, YNBS_Q1QF*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Q1QF( Yi, YTemps);

	 Ytbeta[0]=YG1_Q1QF( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQD->backward( Yting[0] );
	 Yvsmat (YNBS_QD, YNBI_QD, YMAX_JAC_NBI, &YG1Y_QD, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_QD, &YG1Y_QD, YNBS_QD*sizeof(YREAL));
	 }
	 Yting[0]=YS1_QR( Yi, YTemps);
	 Yting[1]=YS1_QD( Yi, YTemps);

	 Ytbeta[0]=YG1_QR( Yi, YTemps);
	 Ytbeta[1]=YG1_QD( Yi, YTemps);

	 for(int i=0; i<31;i++)
		 Yjac[0][i]=0;
	 YQS->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_QS, YNBI_QS, YMAX_JAC_NBI, &YG1Y_QS, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_QS, &YG1Y_QS, YNBS_QS*sizeof(YREAL));
	 }

}


  return 0;
}

int TrajectoryTm::iterate_dfward(int nbp)
{

//

  return 0;
}

int TrajectoryTm::iterate_forwardDual (int nbp)
{



  return 0;
}

int TrajectoryTm::iterate_linwardDual (int nbp)
{


  return 0;
}
}
#endif

