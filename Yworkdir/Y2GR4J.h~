
//----------------------------------------------------
// project: GR4J     header generated by YAO version v.9
//----------------------------------------------------

// ¤ ¤ ¤ ¤ ¤ ¤ ¤ ¤ LES FONCTIONS PREDEFINIES
/*M1_ADJUS*/ 
void Yadjust_X1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X1; ++Yws) 
	 { Ystate_X1(Yws, Yw1) -= Yepsi_X1(Yws, Yw1) * Ygrad_X1(Yws, Yw1); 
	}
}/*M1_ADJUD*/ 
void Yc_adjustd_X1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X1; ++Yws) 
	 { Ydelta_X1(Yws, Yw1, 0) -= Yepsi_X1(Yws, Yw1) * Ygrad_X1(Yws, Yw1); 
	 }
}/*M1_ADJUK*/ 
void Yc_adjustk_X1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X1; ++Yws) 
	 { Ystate_X1(Yws, Yw1) += Ydelta_X1(Yws, Yw1, 0); 
	 }
}/*M1_GCTOTB  */ 
void YgradCTOtab_X1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 tab[Y3windice] += YG_X1(Yws, Yw1); ++Y3windice;}}
}/*M1_VSTA*/ 
void Y3valstate_X1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 Y3x[Y3windice] = YX1(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GSTA*/ 
void Y3getstate_X1(float x[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YX1(Yw1)->Ystate[Yws] = x[Y3windice]; ++Y3windice;}}
}/*M1_VGRAD*/ 
void Y3valgrad_X1(float g[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 g[Y3windice] = YX1(Yw1)->Ygrad[Yws]; ++Y3windice;}}
}/*M1_VXINF*/ 
void Y3valxinf_X1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 Y3xinf[Y3windice] = YX1(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VXSUP*/ 
void Y3valxsup_X1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 Y3xsup[Y3windice] = YX1(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VDXMI*/ 
void Y3valdxmin_X1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 Y3dxmin[Y3windice] = YX1(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GDEL*/ 
void Y3getdelta_X1(float x[])
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 Ydelta_X1(Yws, Ywi, 0) = x[Y3windice]; ++Y3windice;}}
}/*M1_VDEL*/ 
void Y3valdelta_X1()
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 Y3x[Y3windice] = Ydelta_X1(Yws, Ywi, 0); ++Y3windice;}}
}/*M1_TBTOG   */ 
void YtabTOgrad_X1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YG_X1(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_X1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YG_X1(Yws, Yw1) = YD_X1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_X1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YD_X1(Yws, Yw1, Ywt) = YS_X1(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_X1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YD_X1(Yws, Yw1, Ywt) = YG_X1(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_X1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YS_X1(Yws, Yw1) = YD_X1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_X1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YS_X1(Yws, Yw1) = YD_X1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_X1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YS_X1(Yws, Yw1) = YD_X1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_X1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YG_X1(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_X1(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YG_X1(Yws, Yw1) = YS_X1(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_X1(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YG_X1(Yws, Yw1) = YS_X1(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_X1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 tab[Y3windice] = YS_X1(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_X1(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 tab[Y3windice] = YG_X1(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_X1()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YX1(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_X1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YX1(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_X1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("X1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_X1(Yws, Yw1), val);
}/*M0_OUTOB*/ 
int Youtoobs_X1(YioKind yiokind, int Yws, int Ywt, int arbpdt)
{
	 Yaobs.time = arbpdt;
	 Yaobs.imod = Yimod("X1");
	 Yaobs.smod = Yws;/*M1_OUTOB*/ 
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1)
	 {	if(select_io(yiokind, "X1", Yws, Yw1, -1, -1, Ywt, &Ystate_X1(Yws, Yw1)))
			{	Yaobs.iaxe = Yw1; Yaobs.jaxe = -1; Yaobs.kaxe = -1;
				Yaobs.vobs = Ystate_X1(Yws, Yw1);
				if(!Yobs_insert (&Yaobs)) return(0);
			}
	 }/*M9_OUTOB*/  
	 return(1);
}/*M1_SEPS*/ 
void Ysetepsi_X1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 YX1(Yw1)->Yepsi[Yws] = val;}}
}/*M1_CREY*/ 
void Ycreate_X1() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YX1(Yw1) = new YaoX1 ())==NULL) Ycreate_errnew();}
}/*M1_SWISH*/ 
void Ysetwish_X1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X1; ++Yws){
			 Ywish_X1(Yws, Yw1) = val;}}
}/*M1_ADJUS*/ 
void Yadjust_X2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X2; ++Yws) 
	 { Ystate_X2(Yws, Yw1) -= Yepsi_X2(Yws, Yw1) * Ygrad_X2(Yws, Yw1); 
	}
}/*M1_ADJUD*/ 
void Yc_adjustd_X2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X2; ++Yws) 
	 { Ydelta_X2(Yws, Yw1, 0) -= Yepsi_X2(Yws, Yw1) * Ygrad_X2(Yws, Yw1); 
	 }
}/*M1_ADJUK*/ 
void Yc_adjustk_X2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X2; ++Yws) 
	 { Ystate_X2(Yws, Yw1) += Ydelta_X2(Yws, Yw1, 0); 
	 }
}/*M1_GCTOTB  */ 
void YgradCTOtab_X2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 tab[Y3windice] += YG_X2(Yws, Yw1); ++Y3windice;}}
}/*M1_VSTA*/ 
void Y3valstate_X2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 Y3x[Y3windice] = YX2(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GSTA*/ 
void Y3getstate_X2(float x[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YX2(Yw1)->Ystate[Yws] = x[Y3windice]; ++Y3windice;}}
}/*M1_VGRAD*/ 
void Y3valgrad_X2(float g[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 g[Y3windice] = YX2(Yw1)->Ygrad[Yws]; ++Y3windice;}}
}/*M1_VXINF*/ 
void Y3valxinf_X2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 Y3xinf[Y3windice] = YX2(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VXSUP*/ 
void Y3valxsup_X2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 Y3xsup[Y3windice] = YX2(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VDXMI*/ 
void Y3valdxmin_X2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 Y3dxmin[Y3windice] = YX2(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GDEL*/ 
void Y3getdelta_X2(float x[])
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 Ydelta_X2(Yws, Ywi, 0) = x[Y3windice]; ++Y3windice;}}
}/*M1_VDEL*/ 
void Y3valdelta_X2()
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 Y3x[Y3windice] = Ydelta_X2(Yws, Ywi, 0); ++Y3windice;}}
}/*M1_TBTOG   */ 
void YtabTOgrad_X2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YG_X2(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_X2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YG_X2(Yws, Yw1) = YD_X2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_X2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YD_X2(Yws, Yw1, Ywt) = YS_X2(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_X2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YD_X2(Yws, Yw1, Ywt) = YG_X2(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_X2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YS_X2(Yws, Yw1) = YD_X2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_X2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YS_X2(Yws, Yw1) = YD_X2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_X2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YS_X2(Yws, Yw1) = YD_X2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_X2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YG_X2(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_X2(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YG_X2(Yws, Yw1) = YS_X2(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_X2(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YG_X2(Yws, Yw1) = YS_X2(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_X2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 tab[Y3windice] = YS_X2(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_X2(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 tab[Y3windice] = YG_X2(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_X2()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YX2(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_X2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YX2(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_X2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("X2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_X2(Yws, Yw1), val);
}/*M0_OUTOB*/ 
int Youtoobs_X2(YioKind yiokind, int Yws, int Ywt, int arbpdt)
{
	 Yaobs.time = arbpdt;
	 Yaobs.imod = Yimod("X2");
	 Yaobs.smod = Yws;/*M1_OUTOB*/ 
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1)
	 {	if(select_io(yiokind, "X2", Yws, Yw1, -1, -1, Ywt, &Ystate_X2(Yws, Yw1)))
			{	Yaobs.iaxe = Yw1; Yaobs.jaxe = -1; Yaobs.kaxe = -1;
				Yaobs.vobs = Ystate_X2(Yws, Yw1);
				if(!Yobs_insert (&Yaobs)) return(0);
			}
	 }/*M9_OUTOB*/  
	 return(1);
}/*M1_SEPS*/ 
void Ysetepsi_X2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 YX2(Yw1)->Yepsi[Yws] = val;}}
}/*M1_CREY*/ 
void Ycreate_X2() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YX2(Yw1) = new YaoX2 ())==NULL) Ycreate_errnew();}
}/*M1_SWISH*/ 
void Ysetwish_X2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X2; ++Yws){
			 Ywish_X2(Yws, Yw1) = val;}}
}/*M1_ADJUS*/ 
void Yadjust_X3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X3; ++Yws) 
	 { Ystate_X3(Yws, Yw1) -= Yepsi_X3(Yws, Yw1) * Ygrad_X3(Yws, Yw1); 
	}
}/*M1_ADJUD*/ 
void Yc_adjustd_X3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X3; ++Yws) 
	 { Ydelta_X3(Yws, Yw1, 0) -= Yepsi_X3(Yws, Yw1) * Ygrad_X3(Yws, Yw1); 
	 }
}/*M1_ADJUK*/ 
void Yc_adjustk_X3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X3; ++Yws) 
	 { Ystate_X3(Yws, Yw1) += Ydelta_X3(Yws, Yw1, 0); 
	 }
}/*M1_GCTOTB  */ 
void YgradCTOtab_X3(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 tab[Y3windice] += YG_X3(Yws, Yw1); ++Y3windice;}}
}/*M1_VSTA*/ 
void Y3valstate_X3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 Y3x[Y3windice] = YX3(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GSTA*/ 
void Y3getstate_X3(float x[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YX3(Yw1)->Ystate[Yws] = x[Y3windice]; ++Y3windice;}}
}/*M1_VGRAD*/ 
void Y3valgrad_X3(float g[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 g[Y3windice] = YX3(Yw1)->Ygrad[Yws]; ++Y3windice;}}
}/*M1_VXINF*/ 
void Y3valxinf_X3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 Y3xinf[Y3windice] = YX3(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VXSUP*/ 
void Y3valxsup_X3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 Y3xsup[Y3windice] = YX3(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VDXMI*/ 
void Y3valdxmin_X3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 Y3dxmin[Y3windice] = YX3(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GDEL*/ 
void Y3getdelta_X3(float x[])
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 Ydelta_X3(Yws, Ywi, 0) = x[Y3windice]; ++Y3windice;}}
}/*M1_VDEL*/ 
void Y3valdelta_X3()
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 Y3x[Y3windice] = Ydelta_X3(Yws, Ywi, 0); ++Y3windice;}}
}/*M1_TBTOG   */ 
void YtabTOgrad_X3(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YG_X3(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_X3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YG_X3(Yws, Yw1) = YD_X3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_X3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YD_X3(Yws, Yw1, Ywt) = YS_X3(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_X3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YD_X3(Yws, Yw1, Ywt) = YG_X3(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_X3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YS_X3(Yws, Yw1) = YD_X3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_X3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YS_X3(Yws, Yw1) = YD_X3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_X3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YS_X3(Yws, Yw1) = YD_X3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_X3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YG_X3(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_X3(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YG_X3(Yws, Yw1) = YS_X3(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_X3(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YG_X3(Yws, Yw1) = YS_X3(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_X3(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 tab[Y3windice] = YS_X3(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_X3(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 tab[Y3windice] = YG_X3(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_X3()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YX3(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_X3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YX3(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_X3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("X3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_X3(Yws, Yw1), val);
}/*M0_OUTOB*/ 
int Youtoobs_X3(YioKind yiokind, int Yws, int Ywt, int arbpdt)
{
	 Yaobs.time = arbpdt;
	 Yaobs.imod = Yimod("X3");
	 Yaobs.smod = Yws;/*M1_OUTOB*/ 
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1)
	 {	if(select_io(yiokind, "X3", Yws, Yw1, -1, -1, Ywt, &Ystate_X3(Yws, Yw1)))
			{	Yaobs.iaxe = Yw1; Yaobs.jaxe = -1; Yaobs.kaxe = -1;
				Yaobs.vobs = Ystate_X3(Yws, Yw1);
				if(!Yobs_insert (&Yaobs)) return(0);
			}
	 }/*M9_OUTOB*/  
	 return(1);
}/*M1_SEPS*/ 
void Ysetepsi_X3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 YX3(Yw1)->Yepsi[Yws] = val;}}
}/*M1_CREY*/ 
void Ycreate_X3() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YX3(Yw1) = new YaoX3 ())==NULL) Ycreate_errnew();}
}/*M1_SWISH*/ 
void Ysetwish_X3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X3; ++Yws){
			 Ywish_X3(Yws, Yw1) = val;}}
}/*M1_ADJUS*/ 
void Yadjust_X4()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X4; ++Yws) 
	 { Ystate_X4(Yws, Yw1) -= Yepsi_X4(Yws, Yw1) * Ygrad_X4(Yws, Yw1); 
	}
}/*M1_ADJUD*/ 
void Yc_adjustd_X4()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X4; ++Yws) 
	 { Ydelta_X4(Yws, Yw1, 0) -= Yepsi_X4(Yws, Yw1) * Ygrad_X4(Yws, Yw1); 
	 }
}/*M1_ADJUK*/ 
void Yc_adjustk_X4()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1) 
	 for (int Yws=0;Yws<YNBS_X4; ++Yws) 
	 { Ystate_X4(Yws, Yw1) += Ydelta_X4(Yws, Yw1, 0); 
	 }
}/*M1_GCTOTB  */ 
void YgradCTOtab_X4(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 tab[Y3windice] += YG_X4(Yws, Yw1); ++Y3windice;}}
}/*M1_VSTA*/ 
void Y3valstate_X4()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 Y3x[Y3windice] = YX4(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GSTA*/ 
void Y3getstate_X4(float x[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YX4(Yw1)->Ystate[Yws] = x[Y3windice]; ++Y3windice;}}
}/*M1_VGRAD*/ 
void Y3valgrad_X4(float g[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 g[Y3windice] = YX4(Yw1)->Ygrad[Yws]; ++Y3windice;}}
}/*M1_VXINF*/ 
void Y3valxinf_X4()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 Y3xinf[Y3windice] = YX4(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VXSUP*/ 
void Y3valxsup_X4()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 Y3xsup[Y3windice] = YX4(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_VDXMI*/ 
void Y3valdxmin_X4()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 Y3dxmin[Y3windice] = YX4(Yw1)->Ystate[Yws]; ++Y3windice;}}
}/*M1_GDEL*/ 
void Y3getdelta_X4(float x[])
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 Ydelta_X4(Yws, Ywi, 0) = x[Y3windice]; ++Y3windice;}}
}/*M1_VDEL*/ 
void Y3valdelta_X4()
{
	 for (int Ywi=0; Ywi<YA1_Spar; ++Ywi){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 Y3x[Y3windice] = Ydelta_X4(Yws, Ywi, 0); ++Y3windice;}}
}/*M1_TBTOG   */ 
void YtabTOgrad_X4(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YG_X4(Yws, Yw1) = tab[Y3windice]; ++Y3windice;}}
}/*M1_GEQPD */ 
void YgradEQPdelta_X4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YG_X4(Yws, Yw1) = YD_X4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPS */ 
void YdeltaEQPstate_X4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YD_X4(Yws, Yw1, Ywt) = YS_X4(Yws, Yw1) * pfact;}}}
}/*M1_DEQPG */ 
void YdeltaEQPgrad_X4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YD_X4(Yws, Yw1, Ywt) = YG_X4(Yws, Yw1) * pfact;}}}
}/*M1_SEQPD */ 
void YstateEQPdelta_X4(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YS_X4(Yws, Yw1) = YD_X4(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPOD */ 
void YstateEQPOdelta_X4(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YS_X4(Yws, Yw1) = YD_X4(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTD */ 
void YstateEQAPTdelta_X4(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YS_X4(Yws, Yw1) = YD_X4(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQV */ 
void YgradEQval_X4(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YG_X4(Yws, Yw1) = val;}}
}/*M1_GEQPS */ 
void YgradEQPstate_X4(double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YG_X4(Yws, Yw1) = YS_X4(Yws, Yw1) * pfact;}}
}/*M1_GEQPOS */ 
void YgradEQPOstate_X4(double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YG_X4(Yws, Yw1) = YS_X4(Yws, Yw1) * (pfact*(1+Ygetval(codop)));}}
}/*M1_STOTB   */ 
void YstateTOtab_X4(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 tab[Y3windice] = YS_X4(Yws, Yw1); ++Y3windice;}}
}/*M1_GTOTB   */ 
void YgradTOtab_X4(YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 tab[Y3windice] = YG_X4(Yws, Yw1); ++Y3windice;}}
}/*M1_RGRAD*/ 
void Yrazgrad_X4()
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YX4(Yw1)->Ygrad[Yws] = 0.0;}}
}/*M1_SETA*/ 
void Ysetstate_X4(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YX4(Yw1)->Ystate[Yws] = val;}}
}/*M1_YIOTU*/ 
void Yio_X4(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("X4", Yws, Yw1, Yw2, Yw3, Ywt, &YS_X4(Yws, Yw1), val);
}/*M0_OUTOB*/ 
int Youtoobs_X4(YioKind yiokind, int Yws, int Ywt, int arbpdt)
{
	 Yaobs.time = arbpdt;
	 Yaobs.imod = Yimod("X4");
	 Yaobs.smod = Yws;/*M1_OUTOB*/ 
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1)
	 {	if(select_io(yiokind, "X4", Yws, Yw1, -1, -1, Ywt, &Ystate_X4(Yws, Yw1)))
			{	Yaobs.iaxe = Yw1; Yaobs.jaxe = -1; Yaobs.kaxe = -1;
				Yaobs.vobs = Ystate_X4(Yws, Yw1);
				if(!Yobs_insert (&Yaobs)) return(0);
			}
	 }/*M9_OUTOB*/  
	 return(1);
}/*M1_SEPS*/ 
void Ysetepsi_X4(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 YX4(Yw1)->Yepsi[Yws] = val;}}
}/*M1_CREY*/ 
void Ycreate_X4() 	
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 if ((YX4(Yw1) = new YaoX4 ())==NULL) Ycreate_errnew();}
}/*M1_SWISH*/ 
void Ysetwish_X4(double val)
{
	 for (int Yw1=0; Yw1<YA1_Spar; ++Yw1){
		 for (int Yws=0; Yws<YNBS_X4; ++Yws){
			 Ywish_X4(Yws, Yw1) = val;}}
}/*M1_TBTOGT  */ 
void YtabTOgrad_P(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YG_P(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_P(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YG_P(Yws, Yw1, Ywt) = YD_P(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_P(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YD_P(Yws, Yw1, Ywt) = YS_P(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_P(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YD_P(Yws, Yw1, Ywt) = YG_P(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_P(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YS_P(Yws, Yw1, Ywt) = YD_P(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_P(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YS_P(Yws, Yw1, Ywt) = YD_P(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_P(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YS_P(Yws, Yw1, Ywt) = YD_P(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_P(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YG_P(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_P(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YG_P(Yws, Yw1, Ywt) = YS_P(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_P(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YG_P(Yws, Yw1, Ywt) = YS_P(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_P(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 tab[Y3windice] = YS_P(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_P(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 tab[Y3windice] = YG_P(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_P()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YP(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_P(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_P; ++Yws){
				 YP(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_P(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("P", Yws, Yw1, Yw2, Yw3, Ywt, &YS_P(Yws, Yw1, Ywt), val);
}/*M1_CREY*/ 
void Ycreate_P() 	
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YP(Yw1) = new YaoP ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_E(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YG_E(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_E(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YG_E(Yws, Yw1, Ywt) = YD_E(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_E(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YD_E(Yws, Yw1, Ywt) = YS_E(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_E(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YD_E(Yws, Yw1, Ywt) = YG_E(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_E(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YS_E(Yws, Yw1, Ywt) = YD_E(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_E(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YS_E(Yws, Yw1, Ywt) = YD_E(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_E(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YS_E(Yws, Yw1, Ywt) = YD_E(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_E(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YG_E(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_E(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YG_E(Yws, Yw1, Ywt) = YS_E(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_E(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YG_E(Yws, Yw1, Ywt) = YS_E(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_E(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 tab[Y3windice] = YS_E(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_E(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 tab[Y3windice] = YG_E(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_E()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YE(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_E(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_E; ++Yws){
				 YE(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_E(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("E", Yws, Yw1, Yw2, Yw3, Ywt, &YS_E(Yws, Yw1, Ywt), val);
}/*M1_CREY*/ 
void Ycreate_E() 	
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YE(Yw1) = new YaoE ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_INTERC(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YG_INTERC(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_INTERC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YG_INTERC(Yws, Yw1, Ywt) = YD_INTERC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_INTERC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YD_INTERC(Yws, Yw1, Ywt) = YS_INTERC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_INTERC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YD_INTERC(Yws, Yw1, Ywt) = YG_INTERC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_INTERC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YS_INTERC(Yws, Yw1, Ywt) = YD_INTERC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_INTERC(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YS_INTERC(Yws, Yw1, Ywt) = YD_INTERC(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_INTERC(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YS_INTERC(Yws, Yw1, Ywt) = YD_INTERC(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_INTERC(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YG_INTERC(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_INTERC(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YG_INTERC(Yws, Yw1, Ywt) = YS_INTERC(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_INTERC(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YG_INTERC(Yws, Yw1, Ywt) = YS_INTERC(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_INTERC(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 tab[Y3windice] = YS_INTERC(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_INTERC(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 tab[Y3windice] = YG_INTERC(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_INTERC()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YINTERC(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_INTERC(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_INTERC; ++Yws){
				 YINTERC(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_INTERC(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("INTERC", Yws, Yw1, Yw2, Yw3, Ywt, &YS_INTERC(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_INTERC (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], INTERC *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_INTERC)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_INTERC()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YINTERC(Yw1) = new INTERC ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_SX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YG_SX1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_SX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YG_SX1(Yws, Yw1, Ywt) = YD_SX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_SX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YD_SX1(Yws, Yw1, Ywt) = YS_SX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_SX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YD_SX1(Yws, Yw1, Ywt) = YG_SX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_SX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YS_SX1(Yws, Yw1, Ywt) = YD_SX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_SX1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YS_SX1(Yws, Yw1, Ywt) = YD_SX1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_SX1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YS_SX1(Yws, Yw1, Ywt) = YD_SX1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_SX1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YG_SX1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_SX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YG_SX1(Yws, Yw1, Ywt) = YS_SX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_SX1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YG_SX1(Yws, Yw1, Ywt) = YS_SX1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_SX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 tab[Y3windice] = YS_SX1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_SX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 tab[Y3windice] = YG_SX1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_SX1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YSX1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_SX1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_SX1; ++Yws){
				 YSX1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_SX1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("SX1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_SX1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_SX1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], SX1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_SX1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_SX1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YSX1(Yw1) = new SX1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_PNX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YG_PNX1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_PNX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YG_PNX1(Yws, Yw1, Ywt) = YD_PNX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_PNX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YD_PNX1(Yws, Yw1, Ywt) = YS_PNX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_PNX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YD_PNX1(Yws, Yw1, Ywt) = YG_PNX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_PNX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YS_PNX1(Yws, Yw1, Ywt) = YD_PNX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_PNX1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YS_PNX1(Yws, Yw1, Ywt) = YD_PNX1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_PNX1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YS_PNX1(Yws, Yw1, Ywt) = YD_PNX1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_PNX1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YG_PNX1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_PNX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YG_PNX1(Yws, Yw1, Ywt) = YS_PNX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_PNX1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YG_PNX1(Yws, Yw1, Ywt) = YS_PNX1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_PNX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 tab[Y3windice] = YS_PNX1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_PNX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 tab[Y3windice] = YG_PNX1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_PNX1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YPNX1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_PNX1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PNX1; ++Yws){
				 YPNX1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_PNX1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PNX1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PNX1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_PNX1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], PNX1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_PNX1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_PNX1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YPNX1(Yw1) = new PNX1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_ENX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YG_ENX1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_ENX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YG_ENX1(Yws, Yw1, Ywt) = YD_ENX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_ENX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YD_ENX1(Yws, Yw1, Ywt) = YS_ENX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_ENX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YD_ENX1(Yws, Yw1, Ywt) = YG_ENX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_ENX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YS_ENX1(Yws, Yw1, Ywt) = YD_ENX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_ENX1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YS_ENX1(Yws, Yw1, Ywt) = YD_ENX1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_ENX1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YS_ENX1(Yws, Yw1, Ywt) = YD_ENX1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_ENX1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YG_ENX1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_ENX1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YG_ENX1(Yws, Yw1, Ywt) = YS_ENX1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_ENX1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YG_ENX1(Yws, Yw1, Ywt) = YS_ENX1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_ENX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 tab[Y3windice] = YS_ENX1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_ENX1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 tab[Y3windice] = YG_ENX1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_ENX1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YENX1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_ENX1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_ENX1; ++Yws){
				 YENX1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_ENX1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("ENX1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_ENX1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_ENX1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], ENX1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_ENX1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_ENX1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YENX1(Yw1) = new ENX1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_tanhPS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YG_tanhPS(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_tanhPS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YG_tanhPS(Yws, Yw1, Ywt) = YD_tanhPS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_tanhPS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YD_tanhPS(Yws, Yw1, Ywt) = YS_tanhPS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_tanhPS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YD_tanhPS(Yws, Yw1, Ywt) = YG_tanhPS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_tanhPS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YS_tanhPS(Yws, Yw1, Ywt) = YD_tanhPS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_tanhPS(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YS_tanhPS(Yws, Yw1, Ywt) = YD_tanhPS(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_tanhPS(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YS_tanhPS(Yws, Yw1, Ywt) = YD_tanhPS(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_tanhPS(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YG_tanhPS(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_tanhPS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YG_tanhPS(Yws, Yw1, Ywt) = YS_tanhPS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_tanhPS(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YG_tanhPS(Yws, Yw1, Ywt) = YS_tanhPS(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_tanhPS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 tab[Y3windice] = YS_tanhPS(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_tanhPS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 tab[Y3windice] = YG_tanhPS(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_tanhPS()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YtanhPS(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_tanhPS(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhPS; ++Yws){
				 YtanhPS(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_tanhPS(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("tanhPS", Yws, Yw1, Yw2, Yw3, Ywt, &YS_tanhPS(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_tanhPS (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], tanhPS *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_tanhPS)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_tanhPS()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YtanhPS(Yw1) = new tanhPS ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_tanhES(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YG_tanhES(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_tanhES(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YG_tanhES(Yws, Yw1, Ywt) = YD_tanhES(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_tanhES(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YD_tanhES(Yws, Yw1, Ywt) = YS_tanhES(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_tanhES(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YD_tanhES(Yws, Yw1, Ywt) = YG_tanhES(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_tanhES(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YS_tanhES(Yws, Yw1, Ywt) = YD_tanhES(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_tanhES(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YS_tanhES(Yws, Yw1, Ywt) = YD_tanhES(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_tanhES(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YS_tanhES(Yws, Yw1, Ywt) = YD_tanhES(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_tanhES(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YG_tanhES(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_tanhES(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YG_tanhES(Yws, Yw1, Ywt) = YS_tanhES(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_tanhES(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YG_tanhES(Yws, Yw1, Ywt) = YS_tanhES(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_tanhES(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 tab[Y3windice] = YS_tanhES(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_tanhES(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 tab[Y3windice] = YG_tanhES(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_tanhES()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YtanhES(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_tanhES(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_tanhES; ++Yws){
				 YtanhES(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_tanhES(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("tanhES", Yws, Yw1, Yw2, Yw3, Ywt, &YS_tanhES(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_tanhES (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], tanhES *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_tanhES)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_tanhES()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YtanhES(Yw1) = new tanhES ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_PS1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YG_PS1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_PS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YG_PS1(Yws, Yw1, Ywt) = YD_PS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_PS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YD_PS1(Yws, Yw1, Ywt) = YS_PS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_PS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YD_PS1(Yws, Yw1, Ywt) = YG_PS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_PS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YS_PS1(Yws, Yw1, Ywt) = YD_PS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_PS1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YS_PS1(Yws, Yw1, Ywt) = YD_PS1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_PS1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YS_PS1(Yws, Yw1, Ywt) = YD_PS1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_PS1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YG_PS1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_PS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YG_PS1(Yws, Yw1, Ywt) = YS_PS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_PS1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YG_PS1(Yws, Yw1, Ywt) = YS_PS1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_PS1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 tab[Y3windice] = YS_PS1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_PS1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 tab[Y3windice] = YG_PS1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_PS1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YPS1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_PS1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS1; ++Yws){
				 YPS1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_PS1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PS1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PS1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_PS1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], PS1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_PS1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_PS1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YPS1(Yw1) = new PS1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_PS2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YG_PS2(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_PS2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YG_PS2(Yws, Yw1, Ywt) = YD_PS2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_PS2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YD_PS2(Yws, Yw1, Ywt) = YS_PS2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_PS2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YD_PS2(Yws, Yw1, Ywt) = YG_PS2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_PS2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YS_PS2(Yws, Yw1, Ywt) = YD_PS2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_PS2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YS_PS2(Yws, Yw1, Ywt) = YD_PS2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_PS2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YS_PS2(Yws, Yw1, Ywt) = YD_PS2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_PS2(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YG_PS2(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_PS2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YG_PS2(Yws, Yw1, Ywt) = YS_PS2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_PS2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YG_PS2(Yws, Yw1, Ywt) = YS_PS2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_PS2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 tab[Y3windice] = YS_PS2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_PS2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 tab[Y3windice] = YG_PS2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_PS2()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YPS2(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_PS2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS2; ++Yws){
				 YPS2(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_PS2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PS2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PS2(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_PS2 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], PS2 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_PS2)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_PS2()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YPS2(Yw1) = new PS2 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_PS3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YG_PS3(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_PS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YG_PS3(Yws, Yw1, Ywt) = YD_PS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_PS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YD_PS3(Yws, Yw1, Ywt) = YS_PS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_PS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YD_PS3(Yws, Yw1, Ywt) = YG_PS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_PS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YS_PS3(Yws, Yw1, Ywt) = YD_PS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_PS3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YS_PS3(Yws, Yw1, Ywt) = YD_PS3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_PS3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YS_PS3(Yws, Yw1, Ywt) = YD_PS3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_PS3(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YG_PS3(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_PS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YG_PS3(Yws, Yw1, Ywt) = YS_PS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_PS3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YG_PS3(Yws, Yw1, Ywt) = YS_PS3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_PS3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 tab[Y3windice] = YS_PS3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_PS3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 tab[Y3windice] = YG_PS3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_PS3()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YPS3(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_PS3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PS3; ++Yws){
				 YPS3(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_PS3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PS3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PS3(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_PS3 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], PS3 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_PS3)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_PS3()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YPS3(Yw1) = new PS3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_MS1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YG_MS1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_MS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YG_MS1(Yws, Yw1, Ywt) = YD_MS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_MS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YD_MS1(Yws, Yw1, Ywt) = YS_MS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_MS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YD_MS1(Yws, Yw1, Ywt) = YG_MS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_MS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YS_MS1(Yws, Yw1, Ywt) = YD_MS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_MS1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YS_MS1(Yws, Yw1, Ywt) = YD_MS1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_MS1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YS_MS1(Yws, Yw1, Ywt) = YD_MS1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_MS1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YG_MS1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_MS1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YG_MS1(Yws, Yw1, Ywt) = YS_MS1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_MS1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YG_MS1(Yws, Yw1, Ywt) = YS_MS1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_MS1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 tab[Y3windice] = YS_MS1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_MS1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 tab[Y3windice] = YG_MS1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_MS1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YMS1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_MS1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS1; ++Yws){
				 YMS1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_MS1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("MS1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_MS1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_MS1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], MS1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_MS1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_MS1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YMS1(Yw1) = new MS1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_MS21(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YG_MS21(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_MS21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YG_MS21(Yws, Yw1, Ywt) = YD_MS21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_MS21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YD_MS21(Yws, Yw1, Ywt) = YS_MS21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_MS21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YD_MS21(Yws, Yw1, Ywt) = YG_MS21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_MS21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YS_MS21(Yws, Yw1, Ywt) = YD_MS21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_MS21(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YS_MS21(Yws, Yw1, Ywt) = YD_MS21(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_MS21(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YS_MS21(Yws, Yw1, Ywt) = YD_MS21(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_MS21(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YG_MS21(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_MS21(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YG_MS21(Yws, Yw1, Ywt) = YS_MS21(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_MS21(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YG_MS21(Yws, Yw1, Ywt) = YS_MS21(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_MS21(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 tab[Y3windice] = YS_MS21(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_MS21(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 tab[Y3windice] = YG_MS21(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_MS21()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YMS21(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_MS21(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS21; ++Yws){
				 YMS21(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_MS21(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("MS21", Yws, Yw1, Yw2, Yw3, Ywt, &YS_MS21(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_MS21 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], MS21 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_MS21)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_MS21()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YMS21(Yw1) = new MS21 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_MS23(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YG_MS23(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_MS23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YG_MS23(Yws, Yw1, Ywt) = YD_MS23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_MS23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YD_MS23(Yws, Yw1, Ywt) = YS_MS23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_MS23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YD_MS23(Yws, Yw1, Ywt) = YG_MS23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_MS23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YS_MS23(Yws, Yw1, Ywt) = YD_MS23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_MS23(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YS_MS23(Yws, Yw1, Ywt) = YD_MS23(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_MS23(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YS_MS23(Yws, Yw1, Ywt) = YD_MS23(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_MS23(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YG_MS23(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_MS23(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YG_MS23(Yws, Yw1, Ywt) = YS_MS23(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_MS23(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YG_MS23(Yws, Yw1, Ywt) = YS_MS23(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_MS23(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 tab[Y3windice] = YS_MS23(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_MS23(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 tab[Y3windice] = YG_MS23(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_MS23()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YMS23(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_MS23(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS23; ++Yws){
				 YMS23(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_MS23(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("MS23", Yws, Yw1, Yw2, Yw3, Ywt, &YS_MS23(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_MS23 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], MS23 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_MS23)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_MS23()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YMS23(Yw1) = new MS23 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_MS24(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YG_MS24(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_MS24(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YG_MS24(Yws, Yw1, Ywt) = YD_MS24(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_MS24(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YD_MS24(Yws, Yw1, Ywt) = YS_MS24(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_MS24(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YD_MS24(Yws, Yw1, Ywt) = YG_MS24(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_MS24(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YS_MS24(Yws, Yw1, Ywt) = YD_MS24(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_MS24(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YS_MS24(Yws, Yw1, Ywt) = YD_MS24(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_MS24(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YS_MS24(Yws, Yw1, Ywt) = YD_MS24(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_MS24(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YG_MS24(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_MS24(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YG_MS24(Yws, Yw1, Ywt) = YS_MS24(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_MS24(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YG_MS24(Yws, Yw1, Ywt) = YS_MS24(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_MS24(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 tab[Y3windice] = YS_MS24(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_MS24(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 tab[Y3windice] = YG_MS24(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_MS24()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YMS24(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_MS24(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS24; ++Yws){
				 YMS24(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_MS24(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("MS24", Yws, Yw1, Yw2, Yw3, Ywt, &YS_MS24(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_MS24 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], MS24 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_MS24)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_MS24()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YMS24(Yw1) = new MS24 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_MS3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YG_MS3(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_MS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YG_MS3(Yws, Yw1, Ywt) = YD_MS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_MS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YD_MS3(Yws, Yw1, Ywt) = YS_MS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_MS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YD_MS3(Yws, Yw1, Ywt) = YG_MS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_MS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YS_MS3(Yws, Yw1, Ywt) = YD_MS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_MS3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YS_MS3(Yws, Yw1, Ywt) = YD_MS3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_MS3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YS_MS3(Yws, Yw1, Ywt) = YD_MS3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_MS3(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YG_MS3(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_MS3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YG_MS3(Yws, Yw1, Ywt) = YS_MS3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_MS3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YG_MS3(Yws, Yw1, Ywt) = YS_MS3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_MS3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 tab[Y3windice] = YS_MS3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_MS3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 tab[Y3windice] = YG_MS3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_MS3()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YMS3(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_MS3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_MS3; ++Yws){
				 YMS3(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_MS3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("MS3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_MS3(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_MS3 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], MS3 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_MS3)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_MS3()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YMS3(Yw1) = new MS3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_PR(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YG_PR(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_PR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YG_PR(Yws, Yw1, Ywt) = YD_PR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_PR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YD_PR(Yws, Yw1, Ywt) = YS_PR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_PR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YD_PR(Yws, Yw1, Ywt) = YG_PR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_PR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YS_PR(Yws, Yw1, Ywt) = YD_PR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_PR(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YS_PR(Yws, Yw1, Ywt) = YD_PR(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_PR(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YS_PR(Yws, Yw1, Ywt) = YD_PR(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_PR(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YG_PR(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_PR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YG_PR(Yws, Yw1, Ywt) = YS_PR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_PR(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YG_PR(Yws, Yw1, Ywt) = YS_PR(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_PR(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 tab[Y3windice] = YS_PR(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_PR(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 tab[Y3windice] = YG_PR(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_PR()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YPR(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_PR(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_PR; ++Yws){
				 YPR(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_PR(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("PR", Yws, Yw1, Yw2, Yw3, Ywt, &YS_PR(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_PR (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], PR *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_PR)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_PR()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YPR(Yw1) = new PR ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Q9(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YG_Q9(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Q9(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YG_Q9(Yws, Yw1, Ywt) = YD_Q9(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Q9(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YD_Q9(Yws, Yw1, Ywt) = YS_Q9(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Q9(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YD_Q9(Yws, Yw1, Ywt) = YG_Q9(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Q9(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YS_Q9(Yws, Yw1, Ywt) = YD_Q9(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Q9(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YS_Q9(Yws, Yw1, Ywt) = YD_Q9(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Q9(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YS_Q9(Yws, Yw1, Ywt) = YD_Q9(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Q9(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YG_Q9(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Q9(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YG_Q9(Yws, Yw1, Ywt) = YS_Q9(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Q9(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YG_Q9(Yws, Yw1, Ywt) = YS_Q9(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Q9(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 tab[Y3windice] = YS_Q9(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Q9(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 tab[Y3windice] = YG_Q9(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Q9()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YQ9(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Q9(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q9; ++Yws){
				 YQ9(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Q9(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Q9", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Q9(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Q9 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Q9 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Q9)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Q9()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQ9(Yw1) = new Q9 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Q1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = YD_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YD_Q1(Yws, Yw1, Ywt) = YS_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YD_Q1(Yws, Yw1, Ywt) = YG_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YS_Q1(Yws, Yw1, Ywt) = YD_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Q1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YS_Q1(Yws, Yw1, Ywt) = YD_Q1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Q1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YS_Q1(Yws, Yw1, Ywt) = YD_Q1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Q1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Q1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = YS_Q1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Q1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YG_Q1(Yws, Yw1, Ywt) = YS_Q1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Q1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 tab[Y3windice] = YS_Q1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Q1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 tab[Y3windice] = YG_Q1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Q1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YQ1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Q1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1; ++Yws){
				 YQ1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Q1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Q1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Q1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Q1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Q1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Q1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Q1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQ1(Yw1) = new Q1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_F(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YG_F(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YG_F(Yws, Yw1, Ywt) = YD_F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YD_F(Yws, Yw1, Ywt) = YS_F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YD_F(Yws, Yw1, Ywt) = YG_F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YS_F(Yws, Yw1, Ywt) = YD_F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_F(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YS_F(Yws, Yw1, Ywt) = YD_F(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_F(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YS_F(Yws, Yw1, Ywt) = YD_F(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_F(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YG_F(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YG_F(Yws, Yw1, Ywt) = YS_F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_F(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YG_F(Yws, Yw1, Ywt) = YS_F(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_F(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 tab[Y3windice] = YS_F(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_F(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 tab[Y3windice] = YG_F(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_F()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YF(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_F(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_F; ++Yws){
				 YF(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_F(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("F", Yws, Yw1, Yw2, Yw3, Ywt, &YS_F(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_F (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], F *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_F)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_F()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YF(Yw1) = new F ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_QR(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YG_QR(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_QR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YG_QR(Yws, Yw1, Ywt) = YD_QR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_QR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YD_QR(Yws, Yw1, Ywt) = YS_QR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_QR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YD_QR(Yws, Yw1, Ywt) = YG_QR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_QR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YS_QR(Yws, Yw1, Ywt) = YD_QR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_QR(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YS_QR(Yws, Yw1, Ywt) = YD_QR(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_QR(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YS_QR(Yws, Yw1, Ywt) = YD_QR(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_QR(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YG_QR(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_QR(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YG_QR(Yws, Yw1, Ywt) = YS_QR(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_QR(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YG_QR(Yws, Yw1, Ywt) = YS_QR(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_QR(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 tab[Y3windice] = YS_QR(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_QR(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 tab[Y3windice] = YG_QR(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_QR()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YQR(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_QR(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QR; ++Yws){
				 YQR(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_QR(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("QR", Yws, Yw1, Yw2, Yw3, Ywt, &YS_QR(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_QR (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], QR *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_QR)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_QR()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQR(Yw1) = new QR ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_RQ9F(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YG_RQ9F(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_RQ9F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YG_RQ9F(Yws, Yw1, Ywt) = YD_RQ9F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_RQ9F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YD_RQ9F(Yws, Yw1, Ywt) = YS_RQ9F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_RQ9F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YD_RQ9F(Yws, Yw1, Ywt) = YG_RQ9F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_RQ9F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YS_RQ9F(Yws, Yw1, Ywt) = YD_RQ9F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_RQ9F(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YS_RQ9F(Yws, Yw1, Ywt) = YD_RQ9F(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_RQ9F(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YS_RQ9F(Yws, Yw1, Ywt) = YD_RQ9F(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_RQ9F(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YG_RQ9F(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_RQ9F(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YG_RQ9F(Yws, Yw1, Ywt) = YS_RQ9F(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_RQ9F(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YG_RQ9F(Yws, Yw1, Ywt) = YS_RQ9F(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_RQ9F(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 tab[Y3windice] = YS_RQ9F(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_RQ9F(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 tab[Y3windice] = YG_RQ9F(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_RQ9F()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YRQ9F(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_RQ9F(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RQ9F; ++Yws){
				 YRQ9F(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_RQ9F(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("RQ9F", Yws, Yw1, Yw2, Yw3, Ywt, &YS_RQ9F(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_RQ9F (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], RQ9F *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_RQ9F)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1], Yting[2] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1], Yting[2] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1], Yting[2] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_RQ9F()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YRQ9F(Yw1) = new RQ9F ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YG_R1(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YG_R1(Yws, Yw1, Ywt) = YD_R1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YD_R1(Yws, Yw1, Ywt) = YS_R1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YD_R1(Yws, Yw1, Ywt) = YG_R1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YS_R1(Yws, Yw1, Ywt) = YD_R1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YS_R1(Yws, Yw1, Ywt) = YD_R1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R1(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YS_R1(Yws, Yw1, Ywt) = YD_R1(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R1(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YG_R1(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R1(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YG_R1(Yws, Yw1, Ywt) = YS_R1(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R1(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YG_R1(Yws, Yw1, Ywt) = YS_R1(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 tab[Y3windice] = YS_R1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R1(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 tab[Y3windice] = YG_R1(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R1()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YR1(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R1(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R1; ++Yws){
				 YR1(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R1(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R1", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R1(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R1 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R1 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R1)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R1()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR1(Yw1) = new R1 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_R2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YG_R2(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_R2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YG_R2(Yws, Yw1, Ywt) = YD_R2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_R2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YD_R2(Yws, Yw1, Ywt) = YS_R2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_R2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YD_R2(Yws, Yw1, Ywt) = YG_R2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_R2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YS_R2(Yws, Yw1, Ywt) = YD_R2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_R2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YS_R2(Yws, Yw1, Ywt) = YD_R2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_R2(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YS_R2(Yws, Yw1, Ywt) = YD_R2(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_R2(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YG_R2(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_R2(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YG_R2(Yws, Yw1, Ywt) = YS_R2(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_R2(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YG_R2(Yws, Yw1, Ywt) = YS_R2(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_R2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 tab[Y3windice] = YS_R2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_R2(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 tab[Y3windice] = YG_R2(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_R2()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YR2(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_R2(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_R2; ++Yws){
				 YR2(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_R2(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("R2", Yws, Yw1, Yw2, Yw3, Ywt, &YS_R2(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_R2 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], R2 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_R2)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_R2()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YR2(Yw1) = new R2 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_RX3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YG_RX3(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_RX3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YG_RX3(Yws, Yw1, Ywt) = YD_RX3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_RX3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YD_RX3(Yws, Yw1, Ywt) = YS_RX3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_RX3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YD_RX3(Yws, Yw1, Ywt) = YG_RX3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_RX3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YS_RX3(Yws, Yw1, Ywt) = YD_RX3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_RX3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YS_RX3(Yws, Yw1, Ywt) = YD_RX3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_RX3(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YS_RX3(Yws, Yw1, Ywt) = YD_RX3(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_RX3(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YG_RX3(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_RX3(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YG_RX3(Yws, Yw1, Ywt) = YS_RX3(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_RX3(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YG_RX3(Yws, Yw1, Ywt) = YS_RX3(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_RX3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 tab[Y3windice] = YS_RX3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_RX3(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 tab[Y3windice] = YG_RX3(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_RX3()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YRX3(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_RX3(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX3; ++Yws){
				 YRX3(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_RX3(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("RX3", Yws, Yw1, Yw2, Yw3, Ywt, &YS_RX3(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_RX3 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], RX3 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_RX3)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_RX3()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YRX3(Yw1) = new RX3 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_RX32(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YG_RX32(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_RX32(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YG_RX32(Yws, Yw1, Ywt) = YD_RX32(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_RX32(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YD_RX32(Yws, Yw1, Ywt) = YS_RX32(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_RX32(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YD_RX32(Yws, Yw1, Ywt) = YG_RX32(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_RX32(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YS_RX32(Yws, Yw1, Ywt) = YD_RX32(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_RX32(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YS_RX32(Yws, Yw1, Ywt) = YD_RX32(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_RX32(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YS_RX32(Yws, Yw1, Ywt) = YD_RX32(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_RX32(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YG_RX32(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_RX32(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YG_RX32(Yws, Yw1, Ywt) = YS_RX32(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_RX32(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YG_RX32(Yws, Yw1, Ywt) = YS_RX32(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_RX32(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 tab[Y3windice] = YS_RX32(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_RX32(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 tab[Y3windice] = YG_RX32(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_RX32()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YRX32(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_RX32(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_RX32; ++Yws){
				 YRX32(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_RX32(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("RX32", Yws, Yw1, Yw2, Yw3, Ywt, &YS_RX32(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_RX32 (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], RX32 *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_RX32)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_RX32()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YRX32(Yw1) = new RX32 ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_Q1QF(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YG_Q1QF(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_Q1QF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YG_Q1QF(Yws, Yw1, Ywt) = YD_Q1QF(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_Q1QF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YD_Q1QF(Yws, Yw1, Ywt) = YS_Q1QF(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_Q1QF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YD_Q1QF(Yws, Yw1, Ywt) = YG_Q1QF(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_Q1QF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YS_Q1QF(Yws, Yw1, Ywt) = YD_Q1QF(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_Q1QF(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YS_Q1QF(Yws, Yw1, Ywt) = YD_Q1QF(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_Q1QF(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YS_Q1QF(Yws, Yw1, Ywt) = YD_Q1QF(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_Q1QF(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YG_Q1QF(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_Q1QF(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YG_Q1QF(Yws, Yw1, Ywt) = YS_Q1QF(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_Q1QF(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YG_Q1QF(Yws, Yw1, Ywt) = YS_Q1QF(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_Q1QF(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 tab[Y3windice] = YS_Q1QF(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_Q1QF(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 tab[Y3windice] = YG_Q1QF(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_Q1QF()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YQ1QF(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_Q1QF(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_Q1QF; ++Yws){
				 YQ1QF(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_Q1QF(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("Q1QF", Yws, Yw1, Yw2, Yw3, Ywt, &YS_Q1QF(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_Q1QF (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], Q1QF *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_Q1QF)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_Q1QF()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQ1QF(Yw1) = new Q1QF ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_QD(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YG_QD(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_QD(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YG_QD(Yws, Yw1, Ywt) = YD_QD(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_QD(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YD_QD(Yws, Yw1, Ywt) = YS_QD(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_QD(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YD_QD(Yws, Yw1, Ywt) = YG_QD(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_QD(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YS_QD(Yws, Yw1, Ywt) = YD_QD(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_QD(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YS_QD(Yws, Yw1, Ywt) = YD_QD(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_QD(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YS_QD(Yws, Yw1, Ywt) = YD_QD(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_QD(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YG_QD(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_QD(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YG_QD(Yws, Yw1, Ywt) = YS_QD(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_QD(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YG_QD(Yws, Yw1, Ywt) = YS_QD(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_QD(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 tab[Y3windice] = YS_QD(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_QD(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 tab[Y3windice] = YG_QD(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_QD()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YQD(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_QD(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QD; ++Yws){
				 YQD(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_QD(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("QD", Yws, Yw1, Yw2, Yw3, Ywt, &YS_QD(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_QD (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], QD *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_QD)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M1_CREU*/ 
void Ycreate_QD()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQD(Yw1) = new QD ())==NULL) Ycreate_errnew();}
}/*M1_TBTOGT  */ 
void YtabTOgrad_QS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = tab[Y3windice]; ++Y3windice;}}}
}/*M1_GEQPDT*/ 
void YgradEQPdelta_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = YD_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPST*/ 
void YdeltaEQPstate_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YD_QS(Yws, Yw1, Ywt) = YS_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_DEQPGT*/ 
void YdeltaEQPgrad_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YD_QS(Yws, Yw1, Ywt) = YG_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPDT*/ 
void YstateEQPdelta_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YS_QS(Yws, Yw1, Ywt) = YD_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_SEQPODT*/ 
void YstateEQPOdelta_QS(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YS_QS(Yws, Yw1, Ywt) = YD_QS(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_SEQAPTDT*/ 
void YstateEQAPTdelta_QS(int frompdt, int topdt, double pfact, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YS_QS(Yws, Yw1, Ywt) = YD_QS(Yws, Yw1, Ywt) + pfact * tab[Y3windice++];}}}
}/*M1_GEQVT*/ 
void YgradEQval_QS(int frompdt, int topdt, double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = val;}}}
}/*M1_GEQPST*/ 
void YgradEQPstate_QS(int frompdt, int topdt, double pfact)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = YS_QS(Yws, Yw1, Ywt) * pfact;}}}
}/*M1_GEQPOST*/ 
void YgradEQPOstate_QS(int frompdt, int topdt, double pfact, char *codop)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YG_QS(Yws, Yw1, Ywt) = YS_QS(Yws, Yw1, Ywt) * (pfact*(1+Ygetval(codop)));}}}
}/*M1_STOTBT  */ 
void YstateTOtab_QS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 tab[Y3windice] = YS_QS(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_GTOTBT  */ 
void YgradTOtab_QS(int frompdt, int topdt, YREAL tab[])
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=frompdt; Ywt<topdt;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 tab[Y3windice] = YG_QS(Yws, Yw1, Ywt); ++Y3windice;}}}
}/*M1_RGRADT*/ 
void Yrazgrad_QS()
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm; ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YQS(Yw1)->Ygrad[Ywt][Yws] = 0.0;}}}
}/*M1_SETAT*/ 
void Ysetstate_QS(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Ywt=0; Ywt<YNBALLTIME_Tm;  ++Ywt){
			 for (int Yws=0; Yws<YNBS_QS; ++Yws){
				 YQS(Yw1)->Ystate[Ywt][Yws] = val;}}}
}/*M1_YIOUT*/ 
void Yio_QS(int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)	
{  Yiorwf ("QS", Yws, Yw1, Yw2, Yw3, Ywt, &YS_QS(Yws, Yw1, Ywt), val);
}/*M00_GTEST */
int Ytestdf_QS (int modop, int KeKo, float pdx, float ptol, int ynbi, int ynbs, char *nmmod, YREAL yinput[], YREAL ystate[], QS *Modul)
{	 int wk, wj, nbKo=0; YREAL wSj[YMAX_NBS],wdxk,wJjk,wyj,wDjk,wdifjk;
	 YREAL svx; int resKo; char okko[2][3]={"ok", "KO"}; 
	 if (!Ydftestijkt(Yid_QS)) return(0); 
	 memset (Yjac, 0, YMAX_JAC_NBI*YMAX_JAC_NBS*sizeof(YREAL));
/*M01_GTESTT*/
	 Modul->forward( Yting[0], Yting[1] );
	 for (wj=0; wj<ynbs; ++wj) wSj[wj] = ystate[YTemps*ynbs + wj];
	 Modul->backward( Yting[0], Yting[1] );
	 for (wk=0; wk<ynbi; ++wk)
	 {	 svx=yinput[wk];
			 wdxk = svx*pdx;
			 if (modop||svx==0.0) wdxk = pdx; 
			 yinput[wk] += wdxk;
			 Modul->forward( Yting[0], Yting[1] );
			 for (wj=0; wj<ynbs; ++wj)
			 { wJjk = Yjac[wj][wk];
				 wyj = ystate[YTemps*ynbs + wj];
				 wDjk = (wyj - wSj[wj]) / wdxk;
				 wdifjk = fabs(wDjk - wJjk);
				 resKo=(wdifjk/fabs(wJjk))>ptol;  nbKo+=resKo;
				 if(resKo || !KeKo) 
				 printf(" %7s | J[%2i,%2i] |% 12.6e |% 12.6e |% 12.6e :  %s |% 12.6e | (%i %i %i %i)\n",
								 nmmod, wj+1, wk+1, wJjk, wDjk, wdifjk, okko[resKo], svx, Yi+1, Yj+1, Yk+1, Yt+1);
				} 
			  yinput[wk] = svx;
	 }
	 return(nbKo);
}/*M0_OUTOB*/ 
int Youtoobs_QS(YioKind yiokind, int Yws, int Ywt, int arbpdt)
{
	 Yaobs.time = arbpdt;
	 Yaobs.imod = Yimod("QS");
	 Yaobs.smod = Yws;/*M1_OUTOBT*/
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1)
	 {	if(select_io(yiokind, "QS", Yws, Yw1, -1, -1, Ywt, &Ystate_QS(Yws, Yw1, Ywt)))
			{	Yaobs.iaxe = Yw1; Yaobs.jaxe = -1; Yaobs.kaxe = -1;
				Yaobs.vobs = Ystate_QS(Yws, Yw1, Ywt);
				if(!Yobs_insert (&Yaobs)) return(0);
			}
	 }/*M9_OUTOB*/  
	 return(1);
}/*M1_CREU*/ 
void Ycreate_QS()  
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 if ((YQS(Yw1) = new QS ())==NULL) Ycreate_errnew();}
}/*M1_SWISH*/ 
void Ysetwish_QS(double val)
{
	 for (int Yw1=0; Yw1<YA1_Sm; ++Yw1){
		 for (int Yws=0; Yws<YNBS_QS; ++Yws){
			 Ywish_QS(Yws, Yw1) = val;}}
}
void Ycreate_all () 
{
	 Ycreate_X1 ();
	 Ycreate_X2 ();
	 Ycreate_X3 ();
	 Ycreate_X4 ();
	 Ycreate_P ();
	 Ycreate_E ();
	 Ycreate_INTERC ();
	 Ycreate_SX1 ();
	 Ycreate_PNX1 ();
	 Ycreate_ENX1 ();
	 Ycreate_tanhPS ();
	 Ycreate_tanhES ();
	 Ycreate_PS1 ();
	 Ycreate_PS2 ();
	 Ycreate_PS3 ();
	 Ycreate_MS1 ();
	 Ycreate_MS21 ();
	 Ycreate_MS23 ();
	 Ycreate_MS24 ();
	 Ycreate_MS3 ();
	 Ycreate_PR ();
	 Ycreate_Q9 ();
	 Ycreate_Q1 ();
	 Ycreate_F ();
	 Ycreate_QR ();
	 Ycreate_RQ9F ();
	 Ycreate_R1 ();
	 Ycreate_R2 ();
	 Ycreate_RX3 ();
	 Ycreate_RX32 ();
	 Ycreate_Q1QF ();
	 Ycreate_QD ();
	 Ycreate_QS ();
}
void Ywishdiff_all (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, int Ywt, YREAL vobs) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "X1") == 0)
				 YW_X1(Yws, Yw1) = YS_X1(Yws, Yw1) - vobs;
	 else if (strcmp(nmmod, "X2") == 0)
				 YW_X2(Yws, Yw1) = YS_X2(Yws, Yw1) - vobs;
	 else if (strcmp(nmmod, "X3") == 0)
				 YW_X3(Yws, Yw1) = YS_X3(Yws, Yw1) - vobs;
	 else if (strcmp(nmmod, "X4") == 0)
				 YW_X4(Yws, Yw1) = YS_X4(Yws, Yw1) - vobs;
	 else if (strcmp(nmmod, "QS") == 0)
				 YW_QS(Yws, Yw1) = YS_QS(Yws, Yw1, Ywt) - vobs;
}
void Ycostwishdiff_all (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, int Ywt) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "X1") == 0)
				 YG_X1(Yws, Yw1) += Ycostdiff(YW_X1(Yws, Yw1), YW_X1(Yws, Yw1));
	 else if (strcmp(nmmod, "X2") == 0)
				 YG_X2(Yws, Yw1) += Ycostdiff(YW_X2(Yws, Yw1), YW_X2(Yws, Yw1));
	 else if (strcmp(nmmod, "X3") == 0)
				 YG_X3(Yws, Yw1) += Ycostdiff(YW_X3(Yws, Yw1), YW_X3(Yws, Yw1));
	 else if (strcmp(nmmod, "X4") == 0)
				 YG_X4(Yws, Yw1) += Ycostdiff(YW_X4(Yws, Yw1), YW_X4(Yws, Yw1));
	 else if (strcmp(nmmod, "QS") == 0)
				 YG_QS(Yws, Yw1, Ywt) += Ycostdiff(YW_QS(Yws, Yw1), YW_QS(Yws, Yw1));
}
void Yc_dstar_all (int indic, char *nmmod, int nout, int iaxe, int jaxe, int kaxe, int apdt, int pdt, YREAL *vobs, YREAL *qtea) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "X1") == 0)
				 *qtea = YG_X1(nout, iaxe) - (*vobs - YS_X1(nout, iaxe));
	 else if (strcmp(nmmod, "X2") == 0)
				 *qtea = YG_X2(nout, iaxe) - (*vobs - YS_X2(nout, iaxe));
	 else if (strcmp(nmmod, "X3") == 0)
				 *qtea = YG_X3(nout, iaxe) - (*vobs - YS_X3(nout, iaxe));
	 else if (strcmp(nmmod, "X4") == 0)
				 *qtea = YG_X4(nout, iaxe) - (*vobs - YS_X4(nout, iaxe));
	 else if (strcmp(nmmod, "QS") == 0)
				 *qtea = YG_QS(nout, iaxe, pdt) - (*vobs - YS_QS(nout, iaxe, pdt));
}
void Ywishqtea_all (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, YREAL qtea) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "X1") == 0)
				 YW_X1(Yws, Yw1) = qtea;
	 else if (strcmp(nmmod, "X2") == 0)
				 YW_X2(Yws, Yw1) = qtea;
	 else if (strcmp(nmmod, "X3") == 0)
				 YW_X3(Yws, Yw1) = qtea;
	 else if (strcmp(nmmod, "X4") == 0)
				 YW_X4(Yws, Yw1) = qtea;
	 else if (strcmp(nmmod, "QS") == 0)
				 YW_QS(Yws, Yw1) = qtea;
}
void Ycostwishqtea_all (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, int Ywt, YREAL qtea) 
{	
	 if(1==0);
	 else if (strcmp(nmmod, "X1") == 0)
				 YG_X1(Yws, Yw1) += Ycostdiff(qtea, YW_X1(Yws, Yw1));
	 else if (strcmp(nmmod, "X2") == 0)
				 YG_X2(Yws, Yw1) += Ycostdiff(qtea, YW_X2(Yws, Yw1));
	 else if (strcmp(nmmod, "X3") == 0)
				 YG_X3(Yws, Yw1) += Ycostdiff(qtea, YW_X3(Yws, Yw1));
	 else if (strcmp(nmmod, "X4") == 0)
				 YG_X4(Yws, Yw1) += Ycostdiff(qtea, YW_X4(Yws, Yw1));
	 else if (strcmp(nmmod, "QS") == 0)
				 YG_QS(Yws, Yw1, Ywt) += Ycostdiff(qtea, YW_QS(Yws, Yw1));
}
void Youtoobs_mod(YioKind yiokind, char *nmmod, int numout, int pdt, int arbpdt)
{
 	 if(1==0);
 	 else if (strcmp(nmmod, "X1") == 0) Youtoobs_X1(yiokind, numout, pdt, arbpdt);
 	 else if (strcmp(nmmod, "X2") == 0) Youtoobs_X2(yiokind, numout, pdt, arbpdt);
 	 else if (strcmp(nmmod, "X3") == 0) Youtoobs_X3(yiokind, numout, pdt, arbpdt);
 	 else if (strcmp(nmmod, "X4") == 0) Youtoobs_X4(yiokind, numout, pdt, arbpdt);
 	 else if (strcmp(nmmod, "QS") == 0) Youtoobs_QS(yiokind, numout, pdt, arbpdt);
}
void Yadjust_all () 
{
	 Yadjust_X1 ();
	 Yadjust_X2 ();
	 Yadjust_X3 ();
	 Yadjust_X4 ();
}
void Yc_adjustd_all () 
{
	 Yc_adjustd_X1 ();
	 Yc_adjustd_X2 ();
	 Yc_adjustd_X3 ();
	 Yc_adjustd_X4 ();
}
void Yc_adjustk_all () 
{
	 Yc_adjustk_X1 ();
	 Yc_adjustk_X2 ();
	 Yc_adjustk_X3 ();
	 Yc_adjustk_X4 ();
}
void Yrazgrad_all () 
{
	 Yrazgrad_X1 ();
	 Yrazgrad_X2 ();
	 Yrazgrad_X3 ();
	 Yrazgrad_X4 ();
	 Yrazgrad_P ();
	 Yrazgrad_E ();
	 Yrazgrad_INTERC ();
	 Yrazgrad_SX1 ();
	 Yrazgrad_PNX1 ();
	 Yrazgrad_ENX1 ();
	 Yrazgrad_tanhPS ();
	 Yrazgrad_tanhES ();
	 Yrazgrad_PS1 ();
	 Yrazgrad_PS2 ();
	 Yrazgrad_PS3 ();
	 Yrazgrad_MS1 ();
	 Yrazgrad_MS21 ();
	 Yrazgrad_MS23 ();
	 Yrazgrad_MS24 ();
	 Yrazgrad_MS3 ();
	 Yrazgrad_PR ();
	 Yrazgrad_Q9 ();
	 Yrazgrad_Q1 ();
	 Yrazgrad_F ();
	 Yrazgrad_QR ();
	 Yrazgrad_RQ9F ();
	 Yrazgrad_R1 ();
	 Yrazgrad_R2 ();
	 Yrazgrad_RX3 ();
	 Yrazgrad_RX32 ();
	 Yrazgrad_Q1QF ();
	 Yrazgrad_QD ();
	 Yrazgrad_QS ();
}
void Yrazgrad_only (int itraj) 
{
	if (itraj==Yid_Tpar)
	{}
	if (itraj==Yid_Tm)
	{}
}
int Ysetstate_mod (char *nmmod, YREAL val) 
{	int codret=0; int all=0;
	if (!strcmp(nmmod, "Y#A")) all=1;
	if (!strcmp(nmmod, "X1") || all)
	{  Ysetstate_X1(val);codret=1;}
	if (!strcmp(nmmod, "X2") || all)
	{  Ysetstate_X2(val);codret=1;}
	if (!strcmp(nmmod, "X3") || all)
	{  Ysetstate_X3(val);codret=1;}
	if (!strcmp(nmmod, "X4") || all)
	{  Ysetstate_X4(val);codret=1;}
	if (!strcmp(nmmod, "P") || all)
	{  Ysetstate_P(val);codret=1;}
	if (!strcmp(nmmod, "E") || all)
	{  Ysetstate_E(val);codret=1;}
	if (!strcmp(nmmod, "INTERC") || all)
	{  Ysetstate_INTERC(val);codret=1;}
	if (!strcmp(nmmod, "SX1") || all)
	{  Ysetstate_SX1(val);codret=1;}
	if (!strcmp(nmmod, "PNX1") || all)
	{  Ysetstate_PNX1(val);codret=1;}
	if (!strcmp(nmmod, "ENX1") || all)
	{  Ysetstate_ENX1(val);codret=1;}
	if (!strcmp(nmmod, "tanhPS") || all)
	{  Ysetstate_tanhPS(val);codret=1;}
	if (!strcmp(nmmod, "tanhES") || all)
	{  Ysetstate_tanhES(val);codret=1;}
	if (!strcmp(nmmod, "PS1") || all)
	{  Ysetstate_PS1(val);codret=1;}
	if (!strcmp(nmmod, "PS2") || all)
	{  Ysetstate_PS2(val);codret=1;}
	if (!strcmp(nmmod, "PS3") || all)
	{  Ysetstate_PS3(val);codret=1;}
	if (!strcmp(nmmod, "MS1") || all)
	{  Ysetstate_MS1(val);codret=1;}
	if (!strcmp(nmmod, "MS21") || all)
	{  Ysetstate_MS21(val);codret=1;}
	if (!strcmp(nmmod, "MS23") || all)
	{  Ysetstate_MS23(val);codret=1;}
	if (!strcmp(nmmod, "MS24") || all)
	{  Ysetstate_MS24(val);codret=1;}
	if (!strcmp(nmmod, "MS3") || all)
	{  Ysetstate_MS3(val);codret=1;}
	if (!strcmp(nmmod, "PR") || all)
	{  Ysetstate_PR(val);codret=1;}
	if (!strcmp(nmmod, "Q9") || all)
	{  Ysetstate_Q9(val);codret=1;}
	if (!strcmp(nmmod, "Q1") || all)
	{  Ysetstate_Q1(val);codret=1;}
	if (!strcmp(nmmod, "F") || all)
	{  Ysetstate_F(val);codret=1;}
	if (!strcmp(nmmod, "QR") || all)
	{  Ysetstate_QR(val);codret=1;}
	if (!strcmp(nmmod, "RQ9F") || all)
	{  Ysetstate_RQ9F(val);codret=1;}
	if (!strcmp(nmmod, "R1") || all)
	{  Ysetstate_R1(val);codret=1;}
	if (!strcmp(nmmod, "R2") || all)
	{  Ysetstate_R2(val);codret=1;}
	if (!strcmp(nmmod, "RX3") || all)
	{  Ysetstate_RX3(val);codret=1;}
	if (!strcmp(nmmod, "RX32") || all)
	{  Ysetstate_RX32(val);codret=1;}
	if (!strcmp(nmmod, "Q1QF") || all)
	{  Ysetstate_Q1QF(val);codret=1;}
	if (!strcmp(nmmod, "QD") || all)
	{  Ysetstate_QD(val);codret=1;}
	if (!strcmp(nmmod, "QS") || all)
	{  Ysetstate_QS(val);codret=1;}
	return(codret);
}
void Ysetwish_mod (int imod, YREAL val) 
{	if(1==0);
	else if (imod==0) Ysetwish_X1(val);
	else if (imod==1) Ysetwish_X2(val);
	else if (imod==2) Ysetwish_X3(val);
	else if (imod==3) Ysetwish_X4(val);
	else if (imod==32) Ysetwish_QS(val);
}
void  Yio_mod (char *nmmod, int Yws, int Yw1, int Yw2, int Yw3, int Ywt, double val)
{
	 if(1==0);
	 else if (strcmp(nmmod, "X1") == 0) Yio_X1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "X2") == 0) Yio_X2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "X3") == 0) Yio_X3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "X4") == 0) Yio_X4(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "P") == 0) Yio_P(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "E") == 0) Yio_E(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "INTERC") == 0) Yio_INTERC(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "SX1") == 0) Yio_SX1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PNX1") == 0) Yio_PNX1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "ENX1") == 0) Yio_ENX1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "tanhPS") == 0) Yio_tanhPS(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "tanhES") == 0) Yio_tanhES(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PS1") == 0) Yio_PS1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PS2") == 0) Yio_PS2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PS3") == 0) Yio_PS3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "MS1") == 0) Yio_MS1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "MS21") == 0) Yio_MS21(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "MS23") == 0) Yio_MS23(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "MS24") == 0) Yio_MS24(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "MS3") == 0) Yio_MS3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "PR") == 0) Yio_PR(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Q9") == 0) Yio_Q9(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Q1") == 0) Yio_Q1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "F") == 0) Yio_F(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "QR") == 0) Yio_QR(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "RQ9F") == 0) Yio_RQ9F(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R1") == 0) Yio_R1(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "R2") == 0) Yio_R2(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "RX3") == 0) Yio_RX3(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "RX32") == 0) Yio_RX32(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "Q1QF") == 0) Yio_Q1QF(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "QD") == 0) Yio_QD(Yws, Yw1, Yw2, Yw3, Ywt, val);
	 else if (strcmp(nmmod, "QS") == 0) Yio_QS(Yws, Yw1, Yw2, Yw3, Ywt, val);
}
void YgradCTOtab_target (YREAL tab[]) 
{	//Y3windice = 0;
	 YgradCTOtab_X1 (tab);
	 YgradCTOtab_X2 (tab);
	 YgradCTOtab_X3 (tab);
	 YgradCTOtab_X4 (tab);
}
void YtabTOgrad_target (YREAL tab[]) 
{	//Y3windice = 0;
	 YtabTOgrad_X1 (tab);
	 YtabTOgrad_X2 (tab);
	 YtabTOgrad_X3 (tab);
	 YtabTOgrad_X4 (tab);
}
void Y3getstate_all (float x[]) 
{	 Y3windice = 0;
	 Y3getstate_X1 (x);
	 Y3getstate_X2 (x);
	 Y3getstate_X3 (x);
	 Y3getstate_X4 (x);
}
void Y3valstate_all () 
{	 Y3windice = 0;
	 Y3valstate_X1 ();
	 Y3valstate_X2 ();
	 Y3valstate_X3 ();
	 Y3valstate_X4 ();
}
void Y3valgrad_all (float g[]) 
{	 Y3windice = 0;
	 Y3valgrad_X1 (g);
	 Y3valgrad_X2 (g);
	 Y3valgrad_X3 (g);
	 Y3valgrad_X4 (g);
}
void Y3valxinf_all () 
{	 Y3windice = 0;
	 Y3valxinf_X1 ();
	 Y3valxinf_X2 ();
	 Y3valxinf_X3 ();
	 Y3valxinf_X4 ();
}
void Y3valxsup_all () 
{	 Y3windice = 0;
	 Y3valxsup_X1 ();
	 Y3valxsup_X2 ();
	 Y3valxsup_X3 ();
	 Y3valxsup_X4 ();
}
void Y3valdxmin_all () 
{	 Y3windice = 0;
	 Y3valdxmin_X1 ();
	 Y3valdxmin_X2 ();
	 Y3valdxmin_X3 ();
	 Y3valdxmin_X4 ();
}
void Y3getdelta_all (float x[]) 
{	 Y3windice = 0;
	 Y3getdelta_X1 (x);
	 Y3getdelta_X2 (x);
	 Y3getdelta_X3 (x);
	 Y3getdelta_X4 (x);
}
void Y3valdelta_all () 
{	 Y3windice = 0;
	 Y3valdelta_X1 ();
	 Y3valdelta_X2 ();
	 Y3valdelta_X3 ();
	 Y3valdelta_X4 ();
}
void YdeltaEQPCstate_traj(int itraj, char *norkmod, int frompdt, int topdt) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_X1 (0, 1, YTabMod[Yid_X1].pcoef);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_X2 (0, 1, YTabMod[Yid_X2].pcoef);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_X3 (0, 1, YTabMod[Yid_X3].pcoef);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_X4 (0, 1, YTabMod[Yid_X4].pcoef);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_P (frompdt, topdt, YTabMod[Yid_P].pcoef);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_E (frompdt, topdt, YTabMod[Yid_E].pcoef);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_INTERC (frompdt, topdt, YTabMod[Yid_INTERC].pcoef);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_SX1 (frompdt, topdt, YTabMod[Yid_SX1].pcoef);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PNX1 (frompdt, topdt, YTabMod[Yid_PNX1].pcoef);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ENX1 (frompdt, topdt, YTabMod[Yid_ENX1].pcoef);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_tanhPS (frompdt, topdt, YTabMod[Yid_tanhPS].pcoef);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_tanhES (frompdt, topdt, YTabMod[Yid_tanhES].pcoef);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PS1 (frompdt, topdt, YTabMod[Yid_PS1].pcoef);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PS2 (frompdt, topdt, YTabMod[Yid_PS2].pcoef);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PS3 (frompdt, topdt, YTabMod[Yid_PS3].pcoef);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS1 (frompdt, topdt, YTabMod[Yid_MS1].pcoef);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS21 (frompdt, topdt, YTabMod[Yid_MS21].pcoef);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS23 (frompdt, topdt, YTabMod[Yid_MS23].pcoef);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS24 (frompdt, topdt, YTabMod[Yid_MS24].pcoef);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS3 (frompdt, topdt, YTabMod[Yid_MS3].pcoef);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PR (frompdt, topdt, YTabMod[Yid_PR].pcoef);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q9 (frompdt, topdt, YTabMod[Yid_Q9].pcoef);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q1 (frompdt, topdt, YTabMod[Yid_Q1].pcoef);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_F (frompdt, topdt, YTabMod[Yid_F].pcoef);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_QR (frompdt, topdt, YTabMod[Yid_QR].pcoef);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_RQ9F (frompdt, topdt, YTabMod[Yid_RQ9F].pcoef);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R1 (frompdt, topdt, YTabMod[Yid_R1].pcoef);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R2 (frompdt, topdt, YTabMod[Yid_R2].pcoef);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_RX3 (frompdt, topdt, YTabMod[Yid_RX3].pcoef);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_RX32 (frompdt, topdt, YTabMod[Yid_RX32].pcoef);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q1QF (frompdt, topdt, YTabMod[Yid_Q1QF].pcoef);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_QD (frompdt, topdt, YTabMod[Yid_QD].pcoef);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YdeltaEQPstate_QS (frompdt, topdt, YTabMod[Yid_QS].pcoef);
	}
}
void YdeltaEQPCstate_target() 
{
	 YdeltaEQPstate_X1 (0, 1, YTabMod[Yid_X1].pcoef);
	 YdeltaEQPstate_X2 (0, 1, YTabMod[Yid_X2].pcoef);
	 YdeltaEQPstate_X3 (0, 1, YTabMod[Yid_X3].pcoef);
	 YdeltaEQPstate_X4 (0, 1, YTabMod[Yid_X4].pcoef);
}
void YgradEQPdelta_traj(int itraj, char *norkmod, int frompdt, int topdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPdelta_X1 (0, 1, pfact);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPdelta_X2 (0, 1, pfact);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPdelta_X3 (0, 1, pfact);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPdelta_X4 (0, 1, pfact);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_P (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_E (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_INTERC (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_SX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PNX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_ENX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_tanhPS (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_tanhES (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PS1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PS2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PS3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_MS1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_MS21 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_MS23 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_MS24 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_MS3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_PR (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Q9 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Q1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_F (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_QR (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_RQ9F (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_R2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_RX3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_RX32 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_Q1QF (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
	 YgradEQPdelta_QD (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YgradEQPdelta_QS (frompdt, topdt, pfact);
	}
}
void YgradEQPdelta_target(double pfact) 
{
	 YgradEQPdelta_X1 (0, 1, pfact);
	 YgradEQPdelta_X2 (0, 1, pfact);
	 YgradEQPdelta_X3 (0, 1, pfact);
	 YgradEQPdelta_X4 (0, 1, pfact);
}
void YgradEQval_traj(int itraj, char *norkmod, int frompdt, int topdt, double val) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
		 YgradEQval_X1 (val);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
		 YgradEQval_X2 (val);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
		 YgradEQval_X3 (val);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
		 YgradEQval_X4 (val);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_P (frompdt, topdt, val);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_E (frompdt, topdt, val);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_INTERC (frompdt, topdt, val);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_SX1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PNX1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_ENX1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_tanhPS (frompdt, topdt, val);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_tanhES (frompdt, topdt, val);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PS1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PS2 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PS3 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_MS1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_MS21 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_MS23 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_MS24 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_MS3 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_PR (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Q9 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Q1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_F (frompdt, topdt, val);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_QR (frompdt, topdt, val);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_RQ9F (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R1 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_R2 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_RX3 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_RX32 (frompdt, topdt, val);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_Q1QF (frompdt, topdt, val);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
		 YgradEQval_QD (frompdt, topdt, val);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
		 YgradEQval_QS (frompdt, topdt, val);
	}
}
void YdeltaEQPstate_traj(int itraj, char *norkmod, int frompdt, int topdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_X1 (0, 1, pfact);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_X2 (0, 1, pfact);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_X3 (0, 1, pfact);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YdeltaEQPstate_X4 (0, 1, pfact);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_P (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_E (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_INTERC (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_SX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PNX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_ENX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_tanhPS (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_tanhES (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PS1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PS2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PS3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS21 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS23 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS24 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_MS3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_PR (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q9 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_F (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_QR (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_RQ9F (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_R2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_RX3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_RX32 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_Q1QF (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
	 YdeltaEQPstate_QD (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YdeltaEQPstate_QS (frompdt, topdt, pfact);
	}
}
void YdeltaEQPstate_target(double pfact) 
{
	 YdeltaEQPstate_X1 (0, 1, pfact);
	 YdeltaEQPstate_X2 (0, 1, pfact);
	 YdeltaEQPstate_X3 (0, 1, pfact);
	 YdeltaEQPstate_X4 (0, 1, pfact);
}
void YdeltaEQPgrad_target(double pfact) 
{
	 YdeltaEQPgrad_X1 (0, 1, pfact);
	 YdeltaEQPgrad_X2 (0, 1, pfact);
	 YdeltaEQPgrad_X3 (0, 1, pfact);
	 YdeltaEQPgrad_X4 (0, 1, pfact);
}
void YstateEQPdelta_traj(int itraj, char *norkmod, int frompdt, int topdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateEQPdelta_X1 (0, 1, pfact);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateEQPdelta_X2 (0, 1, pfact);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateEQPdelta_X3 (0, 1, pfact);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateEQPdelta_X4 (0, 1, pfact);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_P (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_E (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_INTERC (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_SX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PNX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_ENX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_tanhPS (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_tanhES (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PS1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PS2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PS3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_MS1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_MS21 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_MS23 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_MS24 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_MS3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_PR (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Q9 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Q1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_F (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_QR (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_RQ9F (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_R2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_RX3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_RX32 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_Q1QF (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
	 YstateEQPdelta_QD (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YstateEQPdelta_QS (frompdt, topdt, pfact);
	}
}
void YstateEQPdelta_target(double pfact) 
{
	 YstateEQPdelta_X1 (0, 1, pfact);
	 YstateEQPdelta_X2 (0, 1, pfact);
	 YstateEQPdelta_X3 (0, 1, pfact);
	 YstateEQPdelta_X4 (0, 1, pfact);
}
void YstateEQPOdelta_target(double pfact, char *codop) 
{
	 YstateEQPOdelta_X1 (0, 1, pfact, codop);
	 YstateEQPOdelta_X2 (0, 1, pfact, codop);
	 YstateEQPOdelta_X3 (0, 1, pfact, codop);
	 YstateEQPOdelta_X4 (0, 1, pfact, codop);
}
void YstateEQAPTdelta_target(double pfact, YREAL tab[]) 
{
	 YstateEQAPTdelta_X1 (0, 1, pfact, tab);
	 YstateEQAPTdelta_X2 (0, 1, pfact, tab);
	 YstateEQAPTdelta_X3 (0, 1, pfact, tab);
	 YstateEQAPTdelta_X4 (0, 1, pfact, tab);
}
void YgradEQPstate_traj(int itraj, char *norkmod, int frompdt, int topdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPstate_X1(pfact);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPstate_X2(pfact);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPstate_X3(pfact);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradEQPstate_X4(pfact);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_P (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_E (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_INTERC (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_SX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PNX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_ENX1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_tanhPS (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_tanhES (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PS1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PS2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PS3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_MS1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_MS21 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_MS23 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_MS24 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_MS3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_PR (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Q9 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Q1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_F (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_QR (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_RQ9F (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R1 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_R2 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_RX3 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_RX32 (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_Q1QF (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
	 YgradEQPstate_QD (frompdt, topdt, pfact);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YgradEQPstate_QS (frompdt, topdt, pfact);
	}
}
void YgradEQPstate_target(double pfact) 
{
	 YgradEQPstate_X1 (pfact);
	 YgradEQPstate_X2 (pfact);
	 YgradEQPstate_X3 (pfact);
	 YgradEQPstate_X4 (pfact);
}
void YgradEQPOstate_target(double pfact, char *codop) 
{
	 YgradEQPOstate_X1 (pfact, codop);
	 YgradEQPOstate_X2 (pfact, codop);
	 YgradEQPOstate_X3 (pfact, codop);
	 YgradEQPOstate_X4 (pfact, codop);
}
void YstateTOtab_traj (int itraj, char *norkmod, int frompdt, int topdt, YREAL tab[]) 
{	//Y3windice = 0;
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateTOtab_X1 (tab);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateTOtab_X2 (tab);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateTOtab_X3 (tab);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YstateTOtab_X4 (tab);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_P (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_E (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_INTERC (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_SX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PNX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_ENX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_tanhPS (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_tanhES (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PS1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PS2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PS3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_MS1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_MS21 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_MS23 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_MS24 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_MS3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_PR (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Q9 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Q1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_F (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_QR (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_RQ9F (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_R2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_RX3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_RX32 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_Q1QF (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
	 YstateTOtab_QD (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YstateTOtab_QS (frompdt, topdt, tab);
	}
}
void YstateTOtab_target (YREAL tab[]) 
{	//Y3windice = 0;
	 YstateTOtab_X1 (tab);
	 YstateTOtab_X2 (tab);
	 YstateTOtab_X3 (tab);
	 YstateTOtab_X4 (tab);
}
void YgradTOtab_traj (int itraj, char *norkmod, int frompdt, int topdt, YREAL tab[]) 
{	//Y3windice = 0;
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradTOtab_X1 (tab);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradTOtab_X2 (tab);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradTOtab_X3 (tab);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
	 YgradTOtab_X4 (tab);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_P (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_E (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_INTERC (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_SX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PNX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_ENX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_tanhPS (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_tanhES (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PS1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PS2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PS3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_MS1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_MS21 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_MS23 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_MS24 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_MS3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_PR (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Q9 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Q1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_F (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_QR (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_RQ9F (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_R2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_RX3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_RX32 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_Q1QF (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
	 YgradTOtab_QD (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
	 YgradTOtab_QS (frompdt, topdt, tab);
	}
}
void YgradTOtab_target (YREAL tab[]) 
{	//Y3windice = 0;
	 YgradTOtab_X1 (tab);
	 YgradTOtab_X2 (tab);
	 YgradTOtab_X3 (tab);
	 YgradTOtab_X4 (tab);
}
void YtabTOgrad_traj (int itraj, char *norkmod, int frompdt, int topdt, YREAL tab[]) 
{	//Y3windice = 0;
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
		if ( !strcmp(norkmod, "X1") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
			 YtabTOgrad_X1 (tab);
		if ( !strcmp(norkmod, "X2") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
			 YtabTOgrad_X2 (tab);
		if ( !strcmp(norkmod, "X3") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
			 YtabTOgrad_X3 (tab);
		if ( !strcmp(norkmod, "X4") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#T") )
			 YtabTOgrad_X4 (tab);
	}
	else if (itraj==Yid_Tm)
	{
		if ( !strcmp(norkmod, "P") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_P (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "E") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_E (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "INTERC") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_INTERC (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "SX1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_SX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PNX1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PNX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "ENX1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_ENX1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "tanhPS") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_tanhPS (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "tanhES") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_tanhES (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PS1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS2") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PS2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PS3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PS3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_MS1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS21") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_MS21 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS23") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_MS23 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS24") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_MS24 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "MS3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_MS3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "PR") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_PR (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q9") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Q9 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Q1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "F") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_F (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QR") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_QR (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RQ9F") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_RQ9F (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R1") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R1 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "R2") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_R2 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RX3") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_RX3 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "RX32") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_RX32 (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "Q1QF") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_Q1QF (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QD") || !strcmp(norkmod, "Y#A") )
			 YtabTOgrad_QD (frompdt, topdt, tab);
		if ( !strcmp(norkmod, "QS") || !strcmp(norkmod, "Y#A") || !strcmp(norkmod, "Y#C") )
			 YtabTOgrad_QS (frompdt, topdt, tab);
	}
}
 int Ydfward_all(int modop, char *nmmod, int All, int KeKo,  float pdx, float ptol)
{
	int nbko=0;
	if ( !strcmp(nmmod, "INTERC") || All )
		nbko += Ytestdf_INTERC(modop,KeKo,pdx,ptol,YNBI_INTERC,YNBS_INTERC,"INTERC",Yting,YINTERC[Yi]->Ystate[0],YINTERC[Yi]);
	if ( !strcmp(nmmod, "SX1") || All )
		nbko += Ytestdf_SX1(modop,KeKo,pdx,ptol,YNBI_SX1,YNBS_SX1,"SX1",Yting,YSX1[Yi]->Ystate[0],YSX1[Yi]);
	if ( !strcmp(nmmod, "PNX1") || All )
		nbko += Ytestdf_PNX1(modop,KeKo,pdx,ptol,YNBI_PNX1,YNBS_PNX1,"PNX1",Yting,YPNX1[Yi]->Ystate[0],YPNX1[Yi]);
	if ( !strcmp(nmmod, "ENX1") || All )
		nbko += Ytestdf_ENX1(modop,KeKo,pdx,ptol,YNBI_ENX1,YNBS_ENX1,"ENX1",Yting,YENX1[Yi]->Ystate[0],YENX1[Yi]);
	if ( !strcmp(nmmod, "tanhPS") || All )
		nbko += Ytestdf_tanhPS(modop,KeKo,pdx,ptol,YNBI_tanhPS,YNBS_tanhPS,"tanhPS",Yting,YtanhPS[Yi]->Ystate[0],YtanhPS[Yi]);
	if ( !strcmp(nmmod, "tanhES") || All )
		nbko += Ytestdf_tanhES(modop,KeKo,pdx,ptol,YNBI_tanhES,YNBS_tanhES,"tanhES",Yting,YtanhES[Yi]->Ystate[0],YtanhES[Yi]);
	if ( !strcmp(nmmod, "PS1") || All )
		nbko += Ytestdf_PS1(modop,KeKo,pdx,ptol,YNBI_PS1,YNBS_PS1,"PS1",Yting,YPS1[Yi]->Ystate[0],YPS1[Yi]);
	if ( !strcmp(nmmod, "PS2") || All )
		nbko += Ytestdf_PS2(modop,KeKo,pdx,ptol,YNBI_PS2,YNBS_PS2,"PS2",Yting,YPS2[Yi]->Ystate[0],YPS2[Yi]);
	if ( !strcmp(nmmod, "PS3") || All )
		nbko += Ytestdf_PS3(modop,KeKo,pdx,ptol,YNBI_PS3,YNBS_PS3,"PS3",Yting,YPS3[Yi]->Ystate[0],YPS3[Yi]);
	if ( !strcmp(nmmod, "MS1") || All )
		nbko += Ytestdf_MS1(modop,KeKo,pdx,ptol,YNBI_MS1,YNBS_MS1,"MS1",Yting,YMS1[Yi]->Ystate[0],YMS1[Yi]);
	if ( !strcmp(nmmod, "MS21") || All )
		nbko += Ytestdf_MS21(modop,KeKo,pdx,ptol,YNBI_MS21,YNBS_MS21,"MS21",Yting,YMS21[Yi]->Ystate[0],YMS21[Yi]);
	if ( !strcmp(nmmod, "MS23") || All )
		nbko += Ytestdf_MS23(modop,KeKo,pdx,ptol,YNBI_MS23,YNBS_MS23,"MS23",Yting,YMS23[Yi]->Ystate[0],YMS23[Yi]);
	if ( !strcmp(nmmod, "MS24") || All )
		nbko += Ytestdf_MS24(modop,KeKo,pdx,ptol,YNBI_MS24,YNBS_MS24,"MS24",Yting,YMS24[Yi]->Ystate[0],YMS24[Yi]);
	if ( !strcmp(nmmod, "MS3") || All )
		nbko += Ytestdf_MS3(modop,KeKo,pdx,ptol,YNBI_MS3,YNBS_MS3,"MS3",Yting,YMS3[Yi]->Ystate[0],YMS3[Yi]);
	if ( !strcmp(nmmod, "PR") || All )
		nbko += Ytestdf_PR(modop,KeKo,pdx,ptol,YNBI_PR,YNBS_PR,"PR",Yting,YPR[Yi]->Ystate[0],YPR[Yi]);
	if ( !strcmp(nmmod, "Q9") || All )
		nbko += Ytestdf_Q9(modop,KeKo,pdx,ptol,YNBI_Q9,YNBS_Q9,"Q9",Yting,YQ9[Yi]->Ystate[0],YQ9[Yi]);
	if ( !strcmp(nmmod, "Q1") || All )
		nbko += Ytestdf_Q1(modop,KeKo,pdx,ptol,YNBI_Q1,YNBS_Q1,"Q1",Yting,YQ1[Yi]->Ystate[0],YQ1[Yi]);
	if ( !strcmp(nmmod, "F") || All )
		nbko += Ytestdf_F(modop,KeKo,pdx,ptol,YNBI_F,YNBS_F,"F",Yting,YF[Yi]->Ystate[0],YF[Yi]);
	if ( !strcmp(nmmod, "QR") || All )
		nbko += Ytestdf_QR(modop,KeKo,pdx,ptol,YNBI_QR,YNBS_QR,"QR",Yting,YQR[Yi]->Ystate[0],YQR[Yi]);
	if ( !strcmp(nmmod, "RQ9F") || All )
		nbko += Ytestdf_RQ9F(modop,KeKo,pdx,ptol,YNBI_RQ9F,YNBS_RQ9F,"RQ9F",Yting,YRQ9F[Yi]->Ystate[0],YRQ9F[Yi]);
	if ( !strcmp(nmmod, "R1") || All )
		nbko += Ytestdf_R1(modop,KeKo,pdx,ptol,YNBI_R1,YNBS_R1,"R1",Yting,YR1[Yi]->Ystate[0],YR1[Yi]);
	if ( !strcmp(nmmod, "R2") || All )
		nbko += Ytestdf_R2(modop,KeKo,pdx,ptol,YNBI_R2,YNBS_R2,"R2",Yting,YR2[Yi]->Ystate[0],YR2[Yi]);
	if ( !strcmp(nmmod, "RX3") || All )
		nbko += Ytestdf_RX3(modop,KeKo,pdx,ptol,YNBI_RX3,YNBS_RX3,"RX3",Yting,YRX3[Yi]->Ystate[0],YRX3[Yi]);
	if ( !strcmp(nmmod, "RX32") || All )
		nbko += Ytestdf_RX32(modop,KeKo,pdx,ptol,YNBI_RX32,YNBS_RX32,"RX32",Yting,YRX32[Yi]->Ystate[0],YRX32[Yi]);
	if ( !strcmp(nmmod, "Q1QF") || All )
		nbko += Ytestdf_Q1QF(modop,KeKo,pdx,ptol,YNBI_Q1QF,YNBS_Q1QF,"Q1QF",Yting,YQ1QF[Yi]->Ystate[0],YQ1QF[Yi]);
	if ( !strcmp(nmmod, "QD") || All )
		nbko += Ytestdf_QD(modop,KeKo,pdx,ptol,YNBI_QD,YNBS_QD,"QD",Yting,YQD[Yi]->Ystate[0],YQD[Yi]);
	if ( !strcmp(nmmod, "QS") || All )
		nbko += Ytestdf_QS(modop,KeKo,pdx,ptol,YNBI_QS,YNBS_QS,"QS",Yting,YQS[Yi]->Ystate[0],YQS[Yi]);
	return(nbko);
}

void YwishEQPstate_traj_tocov (int itraj, int pdt, double pfact) 
{
	if (1==0){}
	else if (itraj==Yid_Tpar)
	{
	}
	else if (itraj==Yid_Tm)
	{
	}
}
int Yauto_call (int argc, char *argv[]) 
{
	 int codret=0; int all=0; double val;
	 if (1==0);
	 else if ( !strcmp(argv[0], "setepsi") || !strcmp(argv[0], "SETEPSI") 
					 ||!strcmp(argv[0], "setepsi_all") || !strcmp(argv[0], "SETEPSI_ALL"))
	 {
			 if (!strcmp(argv[0], "setepsi_all") || !strcmp(argv[0], "SETEPSI_ALL")){all=1; val=atof(argv[1]);} else val=atof(argv[2]);
			 if (!strcmp(argv[1], "X1") || all)
					 {Ysetepsi_X1(val);codret=1;}
			 if (!strcmp(argv[1], "X2") || all)
					 {Ysetepsi_X2(val);codret=1;}
			 if (!strcmp(argv[1], "X3") || all)
					 {Ysetepsi_X3(val);codret=1;}
			 if (!strcmp(argv[1], "X4") || all)
					 {Ysetepsi_X4(val);codret=1;}
	 }
	 else codret=0;
	 return(codret);
}

 int Yforward_space_Sm()
{
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=0; Yi<YA1_Sm; ++Yi)
{
	 Yting[0]=YS1_P( Yi, YTemps);
	 Yting[1]=YS1_E( Yi, YTemps);
	 YINTERC(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_X1( Yi);
	 YSX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 YPNX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS2_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 YENX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_PNX1( Yi, YTemps);
	 YtanhPS(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_ENX1( Yi, YTemps);
	 YtanhES(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_SX1( Yi, YTemps);
	 Yting[2]=YS1_tanhPS( Yi, YTemps);
	 Yting[3]=YS1_tanhES( Yi, YTemps);
	 Yting[4]=YS1_X1( Yi);
	 YPS1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_SX1( Yi, YTemps);
	 Yting[1]=YS1_tanhPS( Yi, YTemps);
	 Yting[2]=YS1_tanhES( Yi, YTemps);
	 YPS2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_PS1( Yi, YTemps);
	 Yting[1]=YS2_PS1( Yi, YTemps);
	 Yting[2]=YS1_PS2( Yi, YTemps);
	 Yting[3]=YS2_PS2( Yi, YTemps);
	 Yting[4]=YS1_INTERC( Yi, YTemps);
	 YPS3(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS2_PS3( Yi, YTemps);
	 YMS1(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 YMS23(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS23( Yi, YTemps);
	 YMS21(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS21( Yi, YTemps);
	 YMS24(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS24( Yi, YTemps);
	 YMS3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS1_MS24( Yi, YTemps);
	 YPR(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	 YQ9(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	 YQ1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yting[0]=YS1_R1( Yi, YTemps-1);
	 Yting[1]=YS1_X2( Yi);
	 Yting[2]=YS1_X3( Yi);
	 YF(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_R2( Yi, YTemps-1);
	 Yting[1]=YS1_Q9( Yi, YTemps);
	 Yting[2]=YS1_F( Yi, YTemps);
	 YRQ9F(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_RQ9F( Yi, YTemps);
	 YR1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_X3( Yi);
	 YRX3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_RX3( Yi, YTemps);
	 YRX32(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_RX32( Yi, YTemps);
	 YQR(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_QR( Yi, YTemps);
	 YR2(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_F( Yi, YTemps);
	 YQ1QF(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Q1QF( Yi, YTemps);
	 YQD(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_QR( Yi, YTemps);
	 Yting[1]=YS1_QD( Yi, YTemps);
	 YQS(Yi)->forward( Yting[0], Yting[1] );

}

	 return(0);
}

 int Ylinward_space_Sm()
{
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=0; Yi<YA1_Sm; ++Yi)
{
	 Yting[0]=YS1_P( Yi, YTemps);
	 Yting[1]=YS1_E( Yi, YTemps);
	 Ytbeta[0]=YG1_P( Yi, YTemps);
	 Ytbeta[1]=YG1_E( Yi, YTemps);
	 memset(Yjac, 0, 62*sizeof(double));
	 YINTERC(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_INTERC, YNBI_INTERC, YMAX_JAC_NBI, &YG1Y_INTERC, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_INTERC, &YG1Y_INTERC, YNBS_INTERC*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_X1( Yi);
	 Ytbeta[0]=YG1_MS3( Yi, YTemps-1);
	 Ytbeta[1]=YG1_X1( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YSX1(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_SX1, YNBI_SX1, YMAX_JAC_NBI, &YG1Y_SX1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_SX1, &YG1Y_SX1, YNBS_SX1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 Ytbeta[0]=YG1_INTERC( Yi, YTemps);
	 Ytbeta[1]=YG1_X1( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YPNX1(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_PNX1, YNBI_PNX1, YMAX_JAC_NBI, &YG1Y_PNX1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PNX1, &YG1Y_PNX1, YNBS_PNX1*sizeof(YREAL));
	 }
	 Yting[0]=YS2_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 Ytbeta[0]=YG2_INTERC( Yi, YTemps);
	 Ytbeta[1]=YG1_X1( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YENX1(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_ENX1, YNBI_ENX1, YMAX_JAC_NBI, &YG1Y_ENX1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_ENX1, &YG1Y_ENX1, YNBS_ENX1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_PNX1( Yi, YTemps);
	 Ytbeta[0]=YG1_PNX1( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YtanhPS(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_tanhPS, YNBI_tanhPS, YMAX_JAC_NBI, &YG1Y_tanhPS, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_tanhPS, &YG1Y_tanhPS, YNBS_tanhPS*sizeof(YREAL));
	 }
	 Yting[0]=YS1_ENX1( Yi, YTemps);
	 Ytbeta[0]=YG1_ENX1( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YtanhES(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_tanhES, YNBI_tanhES, YMAX_JAC_NBI, &YG1Y_tanhES, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_tanhES, &YG1Y_tanhES, YNBS_tanhES*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_SX1( Yi, YTemps);
	 Yting[2]=YS1_tanhPS( Yi, YTemps);
	 Yting[3]=YS1_tanhES( Yi, YTemps);
	 Yting[4]=YS1_X1( Yi);
	 Ytbeta[0]=YG1_MS3( Yi, YTemps-1);
	 Ytbeta[1]=YG1_SX1( Yi, YTemps);
	 Ytbeta[2]=YG1_tanhPS( Yi, YTemps);
	 Ytbeta[3]=YG1_tanhES( Yi, YTemps);
	 Ytbeta[4]=YG1_X1( Yi);
	 memset(Yjac, 0, 62*sizeof(double));
	 YPS1(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmat (YNBS_PS1, YNBI_PS1, YMAX_JAC_NBI, &YG1Y_PS1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PS1, &YG1Y_PS1, YNBS_PS1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_SX1( Yi, YTemps);
	 Yting[1]=YS1_tanhPS( Yi, YTemps);
	 Yting[2]=YS1_tanhES( Yi, YTemps);
	 Ytbeta[0]=YG1_SX1( Yi, YTemps);
	 Ytbeta[1]=YG1_tanhPS( Yi, YTemps);
	 Ytbeta[2]=YG1_tanhES( Yi, YTemps);
	 memset(Yjac, 0, 62*sizeof(double));
	 YPS2(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_PS2, YNBI_PS2, YMAX_JAC_NBI, &YG1Y_PS2, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PS2, &YG1Y_PS2, YNBS_PS2*sizeof(YREAL));
	 }
	 Yting[0]=YS1_PS1( Yi, YTemps);
	 Yting[1]=YS2_PS1( Yi, YTemps);
	 Yting[2]=YS1_PS2( Yi, YTemps);
	 Yting[3]=YS2_PS2( Yi, YTemps);
	 Yting[4]=YS1_INTERC( Yi, YTemps);
	 Ytbeta[0]=YG1_PS1( Yi, YTemps);
	 Ytbeta[1]=YG2_PS1( Yi, YTemps);
	 Ytbeta[2]=YG1_PS2( Yi, YTemps);
	 Ytbeta[3]=YG2_PS2( Yi, YTemps);
	 Ytbeta[4]=YG1_INTERC( Yi, YTemps);
	 memset(Yjac, 0, 62*sizeof(double));
	 YPS3(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmat (YNBS_PS3, YNBI_PS3, YMAX_JAC_NBI, &YG1Y_PS3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PS3, &YG1Y_PS3, YNBS_PS3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS2_PS3( Yi, YTemps);
	 Ytbeta[0]=YG1_MS3( Yi, YTemps-1);
	 Ytbeta[1]=YG1_PS3( Yi, YTemps);
	 Ytbeta[2]=YG2_PS3( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS1(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_MS1, YNBI_MS1, YMAX_JAC_NBI, &YG1Y_MS1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS1, &YG1Y_MS1, YNBS_MS1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 Ytbeta[0]=YG1_MS1( Yi, YTemps);
	 Ytbeta[1]=YG1_X1( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS23(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_MS23, YNBI_MS23, YMAX_JAC_NBI, &YG1Y_MS23, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS23, &YG1Y_MS23, YNBS_MS23*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS23( Yi, YTemps);
	 Ytbeta[0]=YG1_MS23( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS21(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_MS21, YNBI_MS21, YMAX_JAC_NBI, &YG1Y_MS21, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS21, &YG1Y_MS21, YNBS_MS21*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS21( Yi, YTemps);
	 Ytbeta[0]=YG1_MS1( Yi, YTemps);
	 Ytbeta[1]=YG1_MS21( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS24(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_MS24, YNBI_MS24, YMAX_JAC_NBI, &YG1Y_MS24, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS24, &YG1Y_MS24, YNBS_MS24*sizeof(YREAL));
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS24( Yi, YTemps);
	 Ytbeta[0]=YG1_MS1( Yi, YTemps);
	 Ytbeta[1]=YG1_MS24( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS3(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_MS3, YNBI_MS3, YMAX_JAC_NBI, &YG1Y_MS3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_MS3, &YG1Y_MS3, YNBS_MS3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS1_MS24( Yi, YTemps);
	 Ytbeta[0]=YG1_INTERC( Yi, YTemps);
	 Ytbeta[1]=YG1_PS3( Yi, YTemps);
	 Ytbeta[2]=YG1_MS24( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YPR(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_PR, YNBI_PR, YMAX_JAC_NBI, &YG1Y_PR, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_PR, &YG1Y_PR, YNBS_PR*sizeof(YREAL));
	 }
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	 Ytbeta[0]=YG1_PR( Yi, YTemps);
	 Ytbeta[1]=YG1_PR( Yi, YTemps-1);
	 Ytbeta[2]=YG1_PR( Yi, YTemps-2);
	 Ytbeta[3]=YG1_PR( Yi, YTemps-3);
	 Ytbeta[4]=YG1_PR( Yi, YTemps-4);
	 Ytbeta[5]=YG1_PR( Yi, YTemps-5);
	 Ytbeta[6]=YG1_PR( Yi, YTemps-6);
	 Ytbeta[7]=YG1_PR( Yi, YTemps-7);
	 Ytbeta[8]=YG1_PR( Yi, YTemps-8);
	 Ytbeta[9]=YG1_PR( Yi, YTemps-9);
	 Ytbeta[10]=YG1_PR( Yi, YTemps-10);
	 Ytbeta[11]=YG1_PR( Yi, YTemps-11);
	 Ytbeta[12]=YG1_PR( Yi, YTemps-12);
	 Ytbeta[13]=YG1_PR( Yi, YTemps-13);
	 Ytbeta[14]=YG1_PR( Yi, YTemps-14);
	 Ytbeta[15]=YG1_PR( Yi, YTemps-15);
	 Ytbeta[16]=YG1_PR( Yi, YTemps-16);
	 Ytbeta[17]=YG1_PR( Yi, YTemps-17);
	 Ytbeta[18]=YG1_PR( Yi, YTemps-18);
	 Ytbeta[19]=YG1_PR( Yi, YTemps-19);
	 Ytbeta[20]=YG1_PR( Yi, YTemps-20);
	 Ytbeta[21]=YG1_PR( Yi, YTemps-21);
	 Ytbeta[22]=YG1_PR( Yi, YTemps-22);
	 Ytbeta[23]=YG1_PR( Yi, YTemps-23);
	 Ytbeta[24]=YG1_PR( Yi, YTemps-24);
	 Ytbeta[25]=YG1_PR( Yi, YTemps-25);
	 Ytbeta[26]=YG1_PR( Yi, YTemps-26);
	 Ytbeta[27]=YG1_PR( Yi, YTemps-27);
	 Ytbeta[28]=YG1_PR( Yi, YTemps-28);
	 Ytbeta[29]=YG1_PR( Yi, YTemps-29);
	 Ytbeta[30]=YG1_X4( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQ9(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yvsmat (YNBS_Q9, YNBI_Q9, YMAX_JAC_NBI, &YG1Y_Q9, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q9, &YG1Y_Q9, YNBS_Q9*sizeof(YREAL));
	 }
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	 Ytbeta[0]=YG1_PR( Yi, YTemps);
	 Ytbeta[1]=YG1_PR( Yi, YTemps-1);
	 Ytbeta[2]=YG1_PR( Yi, YTemps-2);
	 Ytbeta[3]=YG1_PR( Yi, YTemps-3);
	 Ytbeta[4]=YG1_PR( Yi, YTemps-4);
	 Ytbeta[5]=YG1_PR( Yi, YTemps-5);
	 Ytbeta[6]=YG1_PR( Yi, YTemps-6);
	 Ytbeta[7]=YG1_PR( Yi, YTemps-7);
	 Ytbeta[8]=YG1_PR( Yi, YTemps-8);
	 Ytbeta[9]=YG1_PR( Yi, YTemps-9);
	 Ytbeta[10]=YG1_PR( Yi, YTemps-10);
	 Ytbeta[11]=YG1_PR( Yi, YTemps-11);
	 Ytbeta[12]=YG1_PR( Yi, YTemps-12);
	 Ytbeta[13]=YG1_PR( Yi, YTemps-13);
	 Ytbeta[14]=YG1_PR( Yi, YTemps-14);
	 Ytbeta[15]=YG1_PR( Yi, YTemps-15);
	 Ytbeta[16]=YG1_PR( Yi, YTemps-16);
	 Ytbeta[17]=YG1_PR( Yi, YTemps-17);
	 Ytbeta[18]=YG1_PR( Yi, YTemps-18);
	 Ytbeta[19]=YG1_PR( Yi, YTemps-19);
	 Ytbeta[20]=YG1_PR( Yi, YTemps-20);
	 Ytbeta[21]=YG1_PR( Yi, YTemps-21);
	 Ytbeta[22]=YG1_PR( Yi, YTemps-22);
	 Ytbeta[23]=YG1_PR( Yi, YTemps-23);
	 Ytbeta[24]=YG1_PR( Yi, YTemps-24);
	 Ytbeta[25]=YG1_PR( Yi, YTemps-25);
	 Ytbeta[26]=YG1_PR( Yi, YTemps-26);
	 Ytbeta[27]=YG1_PR( Yi, YTemps-27);
	 Ytbeta[28]=YG1_PR( Yi, YTemps-28);
	 Ytbeta[29]=YG1_PR( Yi, YTemps-29);
	 Ytbeta[30]=YG1_X4( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQ1(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yvsmat (YNBS_Q1, YNBI_Q1, YMAX_JAC_NBI, &YG1Y_Q1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q1, &YG1Y_Q1, YNBS_Q1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R1( Yi, YTemps-1);
	 Yting[1]=YS1_X2( Yi);
	 Yting[2]=YS1_X3( Yi);
	 Ytbeta[0]=YG1_R1( Yi, YTemps-1);
	 Ytbeta[1]=YG1_X2( Yi);
	 Ytbeta[2]=YG1_X3( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YF(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_F, YNBI_F, YMAX_JAC_NBI, &YG1Y_F, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_F, &YG1Y_F, YNBS_F*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R2( Yi, YTemps-1);
	 Yting[1]=YS1_Q9( Yi, YTemps);
	 Yting[2]=YS1_F( Yi, YTemps);
	 Ytbeta[0]=YG1_R2( Yi, YTemps-1);
	 Ytbeta[1]=YG1_Q9( Yi, YTemps);
	 Ytbeta[2]=YG1_F( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YRQ9F(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmat (YNBS_RQ9F, YNBI_RQ9F, YMAX_JAC_NBI, &YG1Y_RQ9F, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_RQ9F, &YG1Y_RQ9F, YNBS_RQ9F*sizeof(YREAL));
	 }
	 Yting[0]=YS1_RQ9F( Yi, YTemps);
	 Ytbeta[0]=YG1_RQ9F( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YR1(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_R1, YNBI_R1, YMAX_JAC_NBI, &YG1Y_R1, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R1, &YG1Y_R1, YNBS_R1*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_X3( Yi);
	 Ytbeta[0]=YG1_R1( Yi, YTemps);
	 Ytbeta[1]=YG1_X3( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YRX3(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_RX3, YNBI_RX3, YMAX_JAC_NBI, &YG1Y_RX3, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_RX3, &YG1Y_RX3, YNBS_RX3*sizeof(YREAL));
	 }
	 Yting[0]=YS1_RX3( Yi, YTemps);
	 Ytbeta[0]=YG1_RX3( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YRX32(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_RX32, YNBI_RX32, YMAX_JAC_NBI, &YG1Y_RX32, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_RX32, &YG1Y_RX32, YNBS_RX32*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_RX32( Yi, YTemps);
	 Ytbeta[0]=YG1_R1( Yi, YTemps);
	 Ytbeta[1]=YG1_RX32( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQR(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_QR, YNBI_QR, YMAX_JAC_NBI, &YG1Y_QR, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_QR, &YG1Y_QR, YNBS_QR*sizeof(YREAL));
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_QR( Yi, YTemps);
	 Ytbeta[0]=YG1_R1( Yi, YTemps);
	 Ytbeta[1]=YG1_QR( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YR2(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_R2, YNBI_R2, YMAX_JAC_NBI, &YG1Y_R2, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_R2, &YG1Y_R2, YNBS_R2*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_F( Yi, YTemps);
	 Ytbeta[0]=YG1_Q1( Yi, YTemps);
	 Ytbeta[1]=YG1_F( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQ1QF(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_Q1QF, YNBI_Q1QF, YMAX_JAC_NBI, &YG1Y_Q1QF, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_Q1QF, &YG1Y_Q1QF, YNBS_Q1QF*sizeof(YREAL));
	 }
	 Yting[0]=YS1_Q1QF( Yi, YTemps);
	 Ytbeta[0]=YG1_Q1QF( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQD(Yi)->backward( Yting[0] );
	 Yvsmat (YNBS_QD, YNBI_QD, YMAX_JAC_NBI, &YG1Y_QD, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_QD, &YG1Y_QD, YNBS_QD*sizeof(YREAL));
	 }
	 Yting[0]=YS1_QR( Yi, YTemps);
	 Yting[1]=YS1_QD( Yi, YTemps);
	 Ytbeta[0]=YG1_QR( Yi, YTemps);
	 Ytbeta[1]=YG1_QD( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQS(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmat (YNBS_QS, YNBI_QS, YMAX_JAC_NBI, &YG1Y_QS, Yjac[0], Ytbeta);
	 if (Ytestad_module)
	 {	memcpy(&YD1Y_QS, &YG1Y_QS, YNBS_QS*sizeof(YREAL));
	 }

}

	 return(0);
}

int Ydfward_space_Sm(int modop, char *nmmod, int All, int KeKo, int koleft, float pdx, float ptol, int yi, int yj, int yk)
{
	 int nbko=0;
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=0; Yi<YA1_Sm; ++Yi)
{
	 Yting[0]=YS1_P( Yi, YTemps);
	 Yting[1]=YS1_E( Yi, YTemps);
	if (!strcmp(nmmod, "INTERC") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_INTERC(modop,KeKo,pdx,ptol,YNBI_INTERC,YNBS_INTERC,"INTERC",Yting,YINTERC[Yi]->Ystate[0],YINTERC[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YINTERC(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_X1( Yi);
	if (!strcmp(nmmod, "SX1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_SX1(modop,KeKo,pdx,ptol,YNBI_SX1,YNBS_SX1,"SX1",Yting,YSX1[Yi]->Ystate[0],YSX1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YSX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	if (!strcmp(nmmod, "PNX1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_PNX1(modop,KeKo,pdx,ptol,YNBI_PNX1,YNBS_PNX1,"PNX1",Yting,YPNX1[Yi]->Ystate[0],YPNX1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YPNX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS2_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	if (!strcmp(nmmod, "ENX1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_ENX1(modop,KeKo,pdx,ptol,YNBI_ENX1,YNBS_ENX1,"ENX1",Yting,YENX1[Yi]->Ystate[0],YENX1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YENX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_PNX1( Yi, YTemps);
	if (!strcmp(nmmod, "tanhPS") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_tanhPS(modop,KeKo,pdx,ptol,YNBI_tanhPS,YNBS_tanhPS,"tanhPS",Yting,YtanhPS[Yi]->Ystate[0],YtanhPS[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YtanhPS(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_ENX1( Yi, YTemps);
	if (!strcmp(nmmod, "tanhES") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_tanhES(modop,KeKo,pdx,ptol,YNBI_tanhES,YNBS_tanhES,"tanhES",Yting,YtanhES[Yi]->Ystate[0],YtanhES[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YtanhES(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_SX1( Yi, YTemps);
	 Yting[2]=YS1_tanhPS( Yi, YTemps);
	 Yting[3]=YS1_tanhES( Yi, YTemps);
	 Yting[4]=YS1_X1( Yi);
	if (!strcmp(nmmod, "PS1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_PS1(modop,KeKo,pdx,ptol,YNBI_PS1,YNBS_PS1,"PS1",Yting,YPS1[Yi]->Ystate[0],YPS1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YPS1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_SX1( Yi, YTemps);
	 Yting[1]=YS1_tanhPS( Yi, YTemps);
	 Yting[2]=YS1_tanhES( Yi, YTemps);
	if (!strcmp(nmmod, "PS2") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_PS2(modop,KeKo,pdx,ptol,YNBI_PS2,YNBS_PS2,"PS2",Yting,YPS2[Yi]->Ystate[0],YPS2[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YPS2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_PS1( Yi, YTemps);
	 Yting[1]=YS2_PS1( Yi, YTemps);
	 Yting[2]=YS1_PS2( Yi, YTemps);
	 Yting[3]=YS2_PS2( Yi, YTemps);
	 Yting[4]=YS1_INTERC( Yi, YTemps);
	if (!strcmp(nmmod, "PS3") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_PS3(modop,KeKo,pdx,ptol,YNBI_PS3,YNBS_PS3,"PS3",Yting,YPS3[Yi]->Ystate[0],YPS3[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YPS3(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS2_PS3( Yi, YTemps);
	if (!strcmp(nmmod, "MS1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_MS1(modop,KeKo,pdx,ptol,YNBI_MS1,YNBS_MS1,"MS1",Yting,YMS1[Yi]->Ystate[0],YMS1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YMS1(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	if (!strcmp(nmmod, "MS23") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_MS23(modop,KeKo,pdx,ptol,YNBI_MS23,YNBS_MS23,"MS23",Yting,YMS23[Yi]->Ystate[0],YMS23[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YMS23(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS23( Yi, YTemps);
	if (!strcmp(nmmod, "MS21") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_MS21(modop,KeKo,pdx,ptol,YNBI_MS21,YNBS_MS21,"MS21",Yting,YMS21[Yi]->Ystate[0],YMS21[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YMS21(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS21( Yi, YTemps);
	if (!strcmp(nmmod, "MS24") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_MS24(modop,KeKo,pdx,ptol,YNBI_MS24,YNBS_MS24,"MS24",Yting,YMS24[Yi]->Ystate[0],YMS24[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YMS24(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS24( Yi, YTemps);
	if (!strcmp(nmmod, "MS3") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_MS3(modop,KeKo,pdx,ptol,YNBI_MS3,YNBS_MS3,"MS3",Yting,YMS3[Yi]->Ystate[0],YMS3[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YMS3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS1_MS24( Yi, YTemps);
	if (!strcmp(nmmod, "PR") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_PR(modop,KeKo,pdx,ptol,YNBI_PR,YNBS_PR,"PR",Yting,YPR[Yi]->Ystate[0],YPR[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YPR(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	if (!strcmp(nmmod, "Q9") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Q9(modop,KeKo,pdx,ptol,YNBI_Q9,YNBS_Q9,"Q9",Yting,YQ9[Yi]->Ystate[0],YQ9[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQ9(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	if (!strcmp(nmmod, "Q1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Q1(modop,KeKo,pdx,ptol,YNBI_Q1,YNBS_Q1,"Q1",Yting,YQ1[Yi]->Ystate[0],YQ1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQ1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yting[0]=YS1_R1( Yi, YTemps-1);
	 Yting[1]=YS1_X2( Yi);
	 Yting[2]=YS1_X3( Yi);
	if (!strcmp(nmmod, "F") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_F(modop,KeKo,pdx,ptol,YNBI_F,YNBS_F,"F",Yting,YF[Yi]->Ystate[0],YF[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YF(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_R2( Yi, YTemps-1);
	 Yting[1]=YS1_Q9( Yi, YTemps);
	 Yting[2]=YS1_F( Yi, YTemps);
	if (!strcmp(nmmod, "RQ9F") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_RQ9F(modop,KeKo,pdx,ptol,YNBI_RQ9F,YNBS_RQ9F,"RQ9F",Yting,YRQ9F[Yi]->Ystate[0],YRQ9F[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YRQ9F(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_RQ9F( Yi, YTemps);
	if (!strcmp(nmmod, "R1") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R1(modop,KeKo,pdx,ptol,YNBI_R1,YNBS_R1,"R1",Yting,YR1[Yi]->Ystate[0],YR1[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_X3( Yi);
	if (!strcmp(nmmod, "RX3") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_RX3(modop,KeKo,pdx,ptol,YNBI_RX3,YNBS_RX3,"RX3",Yting,YRX3[Yi]->Ystate[0],YRX3[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YRX3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_RX3( Yi, YTemps);
	if (!strcmp(nmmod, "RX32") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_RX32(modop,KeKo,pdx,ptol,YNBI_RX32,YNBS_RX32,"RX32",Yting,YRX32[Yi]->Ystate[0],YRX32[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YRX32(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_RX32( Yi, YTemps);
	if (!strcmp(nmmod, "QR") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_QR(modop,KeKo,pdx,ptol,YNBI_QR,YNBS_QR,"QR",Yting,YQR[Yi]->Ystate[0],YQR[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQR(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_QR( Yi, YTemps);
	if (!strcmp(nmmod, "R2") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_R2(modop,KeKo,pdx,ptol,YNBI_R2,YNBS_R2,"R2",Yting,YR2[Yi]->Ystate[0],YR2[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YR2(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_F( Yi, YTemps);
	if (!strcmp(nmmod, "Q1QF") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_Q1QF(modop,KeKo,pdx,ptol,YNBI_Q1QF,YNBS_Q1QF,"Q1QF",Yting,YQ1QF[Yi]->Ystate[0],YQ1QF[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQ1QF(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Q1QF( Yi, YTemps);
	if (!strcmp(nmmod, "QD") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_QD(modop,KeKo,pdx,ptol,YNBI_QD,YNBS_QD,"QD",Yting,YQD[Yi]->Ystate[0],YQD[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQD(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_QR( Yi, YTemps);
	 Yting[1]=YS1_QD( Yi, YTemps);
	if (!strcmp(nmmod, "QS") || All)
	{
	 if (Yi>=yi && Yj>=yj && Yk>=yk) 
	 {	nbko += Ytestdf_QS(modop,KeKo,pdx,ptol,YNBI_QS,YNBS_QS,"QS",Yting,YQS[Yi]->Ystate[0],YQS[Yi]);
		 if (nbko>=koleft) return(nbko);
	 }
	}
	 YQS(Yi)->forward( Yting[0], Yting[1] );

}

	 return(nbko);
}

int Ydfward_space_maille_Sm(int modop, char *nmmod, int All, int KeKo,  float pdx, float ptol)
{
	 int nbko=0;
	 Yting[0]=YS1_P( Yi, YTemps);
	 Yting[1]=YS1_E( Yi, YTemps);
	if (!strcmp(nmmod, "INTERC") || All)
	{
	 nbko += Ytestdf_INTERC(modop,KeKo,pdx,ptol,YNBI_INTERC,YNBS_INTERC,"INTERC",Yting,YINTERC[Yi]->Ystate[0],YINTERC[Yi]);
	}
	 YINTERC(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_X1( Yi);
	if (!strcmp(nmmod, "SX1") || All)
	{
	 nbko += Ytestdf_SX1(modop,KeKo,pdx,ptol,YNBI_SX1,YNBS_SX1,"SX1",Yting,YSX1[Yi]->Ystate[0],YSX1[Yi]);
	}
	 YSX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	if (!strcmp(nmmod, "PNX1") || All)
	{
	 nbko += Ytestdf_PNX1(modop,KeKo,pdx,ptol,YNBI_PNX1,YNBS_PNX1,"PNX1",Yting,YPNX1[Yi]->Ystate[0],YPNX1[Yi]);
	}
	 YPNX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS2_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	if (!strcmp(nmmod, "ENX1") || All)
	{
	 nbko += Ytestdf_ENX1(modop,KeKo,pdx,ptol,YNBI_ENX1,YNBS_ENX1,"ENX1",Yting,YENX1[Yi]->Ystate[0],YENX1[Yi]);
	}
	 YENX1(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_PNX1( Yi, YTemps);
	if (!strcmp(nmmod, "tanhPS") || All)
	{
	 nbko += Ytestdf_tanhPS(modop,KeKo,pdx,ptol,YNBI_tanhPS,YNBS_tanhPS,"tanhPS",Yting,YtanhPS[Yi]->Ystate[0],YtanhPS[Yi]);
	}
	 YtanhPS(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_ENX1( Yi, YTemps);
	if (!strcmp(nmmod, "tanhES") || All)
	{
	 nbko += Ytestdf_tanhES(modop,KeKo,pdx,ptol,YNBI_tanhES,YNBS_tanhES,"tanhES",Yting,YtanhES[Yi]->Ystate[0],YtanhES[Yi]);
	}
	 YtanhES(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_SX1( Yi, YTemps);
	 Yting[2]=YS1_tanhPS( Yi, YTemps);
	 Yting[3]=YS1_tanhES( Yi, YTemps);
	 Yting[4]=YS1_X1( Yi);
	if (!strcmp(nmmod, "PS1") || All)
	{
	 nbko += Ytestdf_PS1(modop,KeKo,pdx,ptol,YNBI_PS1,YNBS_PS1,"PS1",Yting,YPS1[Yi]->Ystate[0],YPS1[Yi]);
	}
	 YPS1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_SX1( Yi, YTemps);
	 Yting[1]=YS1_tanhPS( Yi, YTemps);
	 Yting[2]=YS1_tanhES( Yi, YTemps);
	if (!strcmp(nmmod, "PS2") || All)
	{
	 nbko += Ytestdf_PS2(modop,KeKo,pdx,ptol,YNBI_PS2,YNBS_PS2,"PS2",Yting,YPS2[Yi]->Ystate[0],YPS2[Yi]);
	}
	 YPS2(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_PS1( Yi, YTemps);
	 Yting[1]=YS2_PS1( Yi, YTemps);
	 Yting[2]=YS1_PS2( Yi, YTemps);
	 Yting[3]=YS2_PS2( Yi, YTemps);
	 Yting[4]=YS1_INTERC( Yi, YTemps);
	if (!strcmp(nmmod, "PS3") || All)
	{
	 nbko += Ytestdf_PS3(modop,KeKo,pdx,ptol,YNBI_PS3,YNBS_PS3,"PS3",Yting,YPS3[Yi]->Ystate[0],YPS3[Yi]);
	}
	 YPS3(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS2_PS3( Yi, YTemps);
	if (!strcmp(nmmod, "MS1") || All)
	{
	 nbko += Ytestdf_MS1(modop,KeKo,pdx,ptol,YNBI_MS1,YNBS_MS1,"MS1",Yting,YMS1[Yi]->Ystate[0],YMS1[Yi]);
	}
	 YMS1(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	if (!strcmp(nmmod, "MS23") || All)
	{
	 nbko += Ytestdf_MS23(modop,KeKo,pdx,ptol,YNBI_MS23,YNBS_MS23,"MS23",Yting,YMS23[Yi]->Ystate[0],YMS23[Yi]);
	}
	 YMS23(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS23( Yi, YTemps);
	if (!strcmp(nmmod, "MS21") || All)
	{
	 nbko += Ytestdf_MS21(modop,KeKo,pdx,ptol,YNBI_MS21,YNBS_MS21,"MS21",Yting,YMS21[Yi]->Ystate[0],YMS21[Yi]);
	}
	 YMS21(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS21( Yi, YTemps);
	if (!strcmp(nmmod, "MS24") || All)
	{
	 nbko += Ytestdf_MS24(modop,KeKo,pdx,ptol,YNBI_MS24,YNBS_MS24,"MS24",Yting,YMS24[Yi]->Ystate[0],YMS24[Yi]);
	}
	 YMS24(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS24( Yi, YTemps);
	if (!strcmp(nmmod, "MS3") || All)
	{
	 nbko += Ytestdf_MS3(modop,KeKo,pdx,ptol,YNBI_MS3,YNBS_MS3,"MS3",Yting,YMS3[Yi]->Ystate[0],YMS3[Yi]);
	}
	 YMS3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS1_MS24( Yi, YTemps);
	if (!strcmp(nmmod, "PR") || All)
	{
	 nbko += Ytestdf_PR(modop,KeKo,pdx,ptol,YNBI_PR,YNBS_PR,"PR",Yting,YPR[Yi]->Ystate[0],YPR[Yi]);
	}
	 YPR(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	if (!strcmp(nmmod, "Q9") || All)
	{
	 nbko += Ytestdf_Q9(modop,KeKo,pdx,ptol,YNBI_Q9,YNBS_Q9,"Q9",Yting,YQ9[Yi]->Ystate[0],YQ9[Yi]);
	}
	 YQ9(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	if (!strcmp(nmmod, "Q1") || All)
	{
	 nbko += Ytestdf_Q1(modop,KeKo,pdx,ptol,YNBI_Q1,YNBS_Q1,"Q1",Yting,YQ1[Yi]->Ystate[0],YQ1[Yi]);
	}
	 YQ1(Yi)->forward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yting[0]=YS1_R1( Yi, YTemps-1);
	 Yting[1]=YS1_X2( Yi);
	 Yting[2]=YS1_X3( Yi);
	if (!strcmp(nmmod, "F") || All)
	{
	 nbko += Ytestdf_F(modop,KeKo,pdx,ptol,YNBI_F,YNBS_F,"F",Yting,YF[Yi]->Ystate[0],YF[Yi]);
	}
	 YF(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_R2( Yi, YTemps-1);
	 Yting[1]=YS1_Q9( Yi, YTemps);
	 Yting[2]=YS1_F( Yi, YTemps);
	if (!strcmp(nmmod, "RQ9F") || All)
	{
	 nbko += Ytestdf_RQ9F(modop,KeKo,pdx,ptol,YNBI_RQ9F,YNBS_RQ9F,"RQ9F",Yting,YRQ9F[Yi]->Ystate[0],YRQ9F[Yi]);
	}
	 YRQ9F(Yi)->forward( Yting[0], Yting[1], Yting[2] );
	 Yting[0]=YS1_RQ9F( Yi, YTemps);
	if (!strcmp(nmmod, "R1") || All)
	{
	 nbko += Ytestdf_R1(modop,KeKo,pdx,ptol,YNBI_R1,YNBS_R1,"R1",Yting,YR1[Yi]->Ystate[0],YR1[Yi]);
	}
	 YR1(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_X3( Yi);
	if (!strcmp(nmmod, "RX3") || All)
	{
	 nbko += Ytestdf_RX3(modop,KeKo,pdx,ptol,YNBI_RX3,YNBS_RX3,"RX3",Yting,YRX3[Yi]->Ystate[0],YRX3[Yi]);
	}
	 YRX3(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_RX3( Yi, YTemps);
	if (!strcmp(nmmod, "RX32") || All)
	{
	 nbko += Ytestdf_RX32(modop,KeKo,pdx,ptol,YNBI_RX32,YNBS_RX32,"RX32",Yting,YRX32[Yi]->Ystate[0],YRX32[Yi]);
	}
	 YRX32(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_RX32( Yi, YTemps);
	if (!strcmp(nmmod, "QR") || All)
	{
	 nbko += Ytestdf_QR(modop,KeKo,pdx,ptol,YNBI_QR,YNBS_QR,"QR",Yting,YQR[Yi]->Ystate[0],YQR[Yi]);
	}
	 YQR(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_QR( Yi, YTemps);
	if (!strcmp(nmmod, "R2") || All)
	{
	 nbko += Ytestdf_R2(modop,KeKo,pdx,ptol,YNBI_R2,YNBS_R2,"R2",Yting,YR2[Yi]->Ystate[0],YR2[Yi]);
	}
	 YR2(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_F( Yi, YTemps);
	if (!strcmp(nmmod, "Q1QF") || All)
	{
	 nbko += Ytestdf_Q1QF(modop,KeKo,pdx,ptol,YNBI_Q1QF,YNBS_Q1QF,"Q1QF",Yting,YQ1QF[Yi]->Ystate[0],YQ1QF[Yi]);
	}
	 YQ1QF(Yi)->forward( Yting[0], Yting[1] );
	 Yting[0]=YS1_Q1QF( Yi, YTemps);
	if (!strcmp(nmmod, "QD") || All)
	{
	 nbko += Ytestdf_QD(modop,KeKo,pdx,ptol,YNBI_QD,YNBS_QD,"QD",Yting,YQD[Yi]->Ystate[0],YQD[Yi]);
	}
	 YQD(Yi)->forward( Yting[0] );
	 Yting[0]=YS1_QR( Yi, YTemps);
	 Yting[1]=YS1_QD( Yi, YTemps);
	if (!strcmp(nmmod, "QS") || All)
	{
	 nbko += Ytestdf_QS(modop,KeKo,pdx,ptol,YNBI_QS,YNBS_QS,"QS",Yting,YQS[Yi]->Ystate[0],YQS[Yi]);
	}
	 YQS(Yi)->forward( Yting[0], Yting[1] );
	 return(nbko);
}

 int Ybackward_space_Sm()
{
	 YA1=1; YA2=0; YA3=0;
Yi=-1; Yj=-1; Yk=-1; /* init des indices de maille: maj par la boucle si valide*/
for(Yi=YA1_Sm-1; Yi>=0; --Yi)
{
	 Yting[0]=YS1_QR( Yi, YTemps);
	 Yting[1]=YS1_QD( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQS(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_QS, YNBI_QS, YMAX_JAC_NBI, &YG1Y_QS, Yjac[0], Ytbeta);
	 YG1_QR( Yi, YTemps) += Ytbeta[0];
	 YG1_QD( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_QR( Yi, YTemps);
			Yting[1]=YD1_QD( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_QS, &YG1Y_QS, YNBS_QS);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_QS);
			if (!Ytesterrad_mod("QS", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Q1QF( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQD(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_QD, YNBI_QD, YMAX_JAC_NBI, &YG1Y_QD, Yjac[0], Ytbeta);
	 YG1_Q1QF( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_Q1QF( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_QD, &YG1Y_QD, YNBS_QD);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_QD);
			if (!Ytesterrad_mod("QD", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_Q1( Yi, YTemps);
	 Yting[1]=YS1_F( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQ1QF(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_Q1QF, YNBI_Q1QF, YMAX_JAC_NBI, &YG1Y_Q1QF, Yjac[0], Ytbeta);
	 YG1_Q1( Yi, YTemps) += Ytbeta[0];
	 YG1_F( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_Q1( Yi, YTemps);
			Yting[1]=YD1_F( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_Q1QF, &YG1Y_Q1QF, YNBS_Q1QF);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q1QF);
			if (!Ytesterrad_mod("Q1QF", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_QR( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YR2(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_R2, YNBI_R2, YMAX_JAC_NBI, &YG1Y_R2, Yjac[0], Ytbeta);
	 YG1_R1( Yi, YTemps) += Ytbeta[0];
	 YG1_QR( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_R1( Yi, YTemps);
			Yting[1]=YD1_QR( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_R2, &YG1Y_R2, YNBS_R2);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R2);
			if (!Ytesterrad_mod("R2", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_RX32( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQR(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_QR, YNBI_QR, YMAX_JAC_NBI, &YG1Y_QR, Yjac[0], Ytbeta);
	 YG1_R1( Yi, YTemps) += Ytbeta[0];
	 YG1_RX32( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_R1( Yi, YTemps);
			Yting[1]=YD1_RX32( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_QR, &YG1Y_QR, YNBS_QR);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_QR);
			if (!Ytesterrad_mod("QR", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_RX3( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YRX32(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_RX32, YNBI_RX32, YMAX_JAC_NBI, &YG1Y_RX32, Yjac[0], Ytbeta);
	 YG1_RX3( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_RX3( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_RX32, &YG1Y_RX32, YNBS_RX32);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_RX32);
			if (!Ytesterrad_mod("RX32", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R1( Yi, YTemps);
	 Yting[1]=YS1_X3( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YRX3(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_RX3, YNBI_RX3, YMAX_JAC_NBI, &YG1Y_RX3, Yjac[0], Ytbeta);
	 YG1_R1( Yi, YTemps) += Ytbeta[0];
	 YG1_X3( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_R1( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X3( Yi, 0);
			YLTRes = Yprosca(&YD1Y_RX3, &YG1Y_RX3, YNBS_RX3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_RX3);
			if (!Ytesterrad_mod("RX3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_RQ9F( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YR1(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_R1, YNBI_R1, YMAX_JAC_NBI, &YG1Y_R1, Yjac[0], Ytbeta);
	 YG1_RQ9F( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_RQ9F( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_R1, &YG1Y_R1, YNBS_R1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_R1);
			if (!Ytesterrad_mod("R1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R2( Yi, YTemps-1);
	 Yting[1]=YS1_Q9( Yi, YTemps);
	 Yting[2]=YS1_F( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YRQ9F(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_RQ9F, YNBI_RQ9F, YMAX_JAC_NBI, &YG1Y_RQ9F, Yjac[0], Ytbeta);
	 YG1_R2( Yi, YTemps-1) += Ytbeta[0];
	 YG1_Q9( Yi, YTemps) += Ytbeta[1];
	 YG1_F( Yi, YTemps) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_R2( Yi, YTemps-1);
			Yting[1]=YD1_Q9( Yi, YTemps);
			Yting[2]=YD1_F( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_RQ9F, &YG1Y_RQ9F, YNBS_RQ9F);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_RQ9F);
			if (!Ytesterrad_mod("RQ9F", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_R1( Yi, YTemps-1);
	 Yting[1]=YS1_X2( Yi);
	 Yting[2]=YS1_X3( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YF(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_F, YNBI_F, YMAX_JAC_NBI, &YG1Y_F, Yjac[0], Ytbeta);
	 YG1_R1( Yi, YTemps-1) += Ytbeta[0];
	 YG1_X2( Yi) += Ytbeta[1];
	 YG1_X3( Yi) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_R1( Yi, YTemps-1);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X2( Yi, 0);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[2]=YD1_X3( Yi, 0);
			YLTRes = Yprosca(&YD1Y_F, &YG1Y_F, YNBS_F);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_F);
			if (!Ytesterrad_mod("F", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQ1(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yvsmatt (YNBS_Q1, YNBI_Q1, YMAX_JAC_NBI, &YG1Y_Q1, Yjac[0], Ytbeta);
	 YG1_PR( Yi, YTemps) += Ytbeta[0];
	 YG1_PR( Yi, YTemps-1) += Ytbeta[1];
	 YG1_PR( Yi, YTemps-2) += Ytbeta[2];
	 YG1_PR( Yi, YTemps-3) += Ytbeta[3];
	 YG1_PR( Yi, YTemps-4) += Ytbeta[4];
	 YG1_PR( Yi, YTemps-5) += Ytbeta[5];
	 YG1_PR( Yi, YTemps-6) += Ytbeta[6];
	 YG1_PR( Yi, YTemps-7) += Ytbeta[7];
	 YG1_PR( Yi, YTemps-8) += Ytbeta[8];
	 YG1_PR( Yi, YTemps-9) += Ytbeta[9];
	 YG1_PR( Yi, YTemps-10) += Ytbeta[10];
	 YG1_PR( Yi, YTemps-11) += Ytbeta[11];
	 YG1_PR( Yi, YTemps-12) += Ytbeta[12];
	 YG1_PR( Yi, YTemps-13) += Ytbeta[13];
	 YG1_PR( Yi, YTemps-14) += Ytbeta[14];
	 YG1_PR( Yi, YTemps-15) += Ytbeta[15];
	 YG1_PR( Yi, YTemps-16) += Ytbeta[16];
	 YG1_PR( Yi, YTemps-17) += Ytbeta[17];
	 YG1_PR( Yi, YTemps-18) += Ytbeta[18];
	 YG1_PR( Yi, YTemps-19) += Ytbeta[19];
	 YG1_PR( Yi, YTemps-20) += Ytbeta[20];
	 YG1_PR( Yi, YTemps-21) += Ytbeta[21];
	 YG1_PR( Yi, YTemps-22) += Ytbeta[22];
	 YG1_PR( Yi, YTemps-23) += Ytbeta[23];
	 YG1_PR( Yi, YTemps-24) += Ytbeta[24];
	 YG1_PR( Yi, YTemps-25) += Ytbeta[25];
	 YG1_PR( Yi, YTemps-26) += Ytbeta[26];
	 YG1_PR( Yi, YTemps-27) += Ytbeta[27];
	 YG1_PR( Yi, YTemps-28) += Ytbeta[28];
	 YG1_PR( Yi, YTemps-29) += Ytbeta[29];
	 YG1_X4( Yi) += Ytbeta[30];
	 if (Ytestad_module) {
			Yting[0]=YD1_PR( Yi, YTemps);
			Yting[1]=YD1_PR( Yi, YTemps-1);
			Yting[2]=YD1_PR( Yi, YTemps-2);
			Yting[3]=YD1_PR( Yi, YTemps-3);
			Yting[4]=YD1_PR( Yi, YTemps-4);
			Yting[5]=YD1_PR( Yi, YTemps-5);
			Yting[6]=YD1_PR( Yi, YTemps-6);
			Yting[7]=YD1_PR( Yi, YTemps-7);
			Yting[8]=YD1_PR( Yi, YTemps-8);
			Yting[9]=YD1_PR( Yi, YTemps-9);
			Yting[10]=YD1_PR( Yi, YTemps-10);
			Yting[11]=YD1_PR( Yi, YTemps-11);
			Yting[12]=YD1_PR( Yi, YTemps-12);
			Yting[13]=YD1_PR( Yi, YTemps-13);
			Yting[14]=YD1_PR( Yi, YTemps-14);
			Yting[15]=YD1_PR( Yi, YTemps-15);
			Yting[16]=YD1_PR( Yi, YTemps-16);
			Yting[17]=YD1_PR( Yi, YTemps-17);
			Yting[18]=YD1_PR( Yi, YTemps-18);
			Yting[19]=YD1_PR( Yi, YTemps-19);
			Yting[20]=YD1_PR( Yi, YTemps-20);
			Yting[21]=YD1_PR( Yi, YTemps-21);
			Yting[22]=YD1_PR( Yi, YTemps-22);
			Yting[23]=YD1_PR( Yi, YTemps-23);
			Yting[24]=YD1_PR( Yi, YTemps-24);
			Yting[25]=YD1_PR( Yi, YTemps-25);
			Yting[26]=YD1_PR( Yi, YTemps-26);
			Yting[27]=YD1_PR( Yi, YTemps-27);
			Yting[28]=YD1_PR( Yi, YTemps-28);
			Yting[29]=YD1_PR( Yi, YTemps-29);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[30]=YD1_X4( Yi, 0);
			YLTRes = Yprosca(&YD1Y_Q1, &YG1Y_Q1, YNBS_Q1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q1);
			if (!Ytesterrad_mod("Q1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PR( Yi, YTemps);
	 Yting[1]=YS1_PR( Yi, YTemps-1);
	 Yting[2]=YS1_PR( Yi, YTemps-2);
	 Yting[3]=YS1_PR( Yi, YTemps-3);
	 Yting[4]=YS1_PR( Yi, YTemps-4);
	 Yting[5]=YS1_PR( Yi, YTemps-5);
	 Yting[6]=YS1_PR( Yi, YTemps-6);
	 Yting[7]=YS1_PR( Yi, YTemps-7);
	 Yting[8]=YS1_PR( Yi, YTemps-8);
	 Yting[9]=YS1_PR( Yi, YTemps-9);
	 Yting[10]=YS1_PR( Yi, YTemps-10);
	 Yting[11]=YS1_PR( Yi, YTemps-11);
	 Yting[12]=YS1_PR( Yi, YTemps-12);
	 Yting[13]=YS1_PR( Yi, YTemps-13);
	 Yting[14]=YS1_PR( Yi, YTemps-14);
	 Yting[15]=YS1_PR( Yi, YTemps-15);
	 Yting[16]=YS1_PR( Yi, YTemps-16);
	 Yting[17]=YS1_PR( Yi, YTemps-17);
	 Yting[18]=YS1_PR( Yi, YTemps-18);
	 Yting[19]=YS1_PR( Yi, YTemps-19);
	 Yting[20]=YS1_PR( Yi, YTemps-20);
	 Yting[21]=YS1_PR( Yi, YTemps-21);
	 Yting[22]=YS1_PR( Yi, YTemps-22);
	 Yting[23]=YS1_PR( Yi, YTemps-23);
	 Yting[24]=YS1_PR( Yi, YTemps-24);
	 Yting[25]=YS1_PR( Yi, YTemps-25);
	 Yting[26]=YS1_PR( Yi, YTemps-26);
	 Yting[27]=YS1_PR( Yi, YTemps-27);
	 Yting[28]=YS1_PR( Yi, YTemps-28);
	 Yting[29]=YS1_PR( Yi, YTemps-29);
	 Yting[30]=YS1_X4( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YQ9(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4], Yting[5], Yting[6], Yting[7], Yting[8], Yting[9], Yting[10], Yting[11], Yting[12], Yting[13], Yting[14], Yting[15], Yting[16], Yting[17], Yting[18], Yting[19], Yting[20], Yting[21], Yting[22], Yting[23], Yting[24], Yting[25], Yting[26], Yting[27], Yting[28], Yting[29], Yting[30] );
	 Yvsmatt (YNBS_Q9, YNBI_Q9, YMAX_JAC_NBI, &YG1Y_Q9, Yjac[0], Ytbeta);
	 YG1_PR( Yi, YTemps) += Ytbeta[0];
	 YG1_PR( Yi, YTemps-1) += Ytbeta[1];
	 YG1_PR( Yi, YTemps-2) += Ytbeta[2];
	 YG1_PR( Yi, YTemps-3) += Ytbeta[3];
	 YG1_PR( Yi, YTemps-4) += Ytbeta[4];
	 YG1_PR( Yi, YTemps-5) += Ytbeta[5];
	 YG1_PR( Yi, YTemps-6) += Ytbeta[6];
	 YG1_PR( Yi, YTemps-7) += Ytbeta[7];
	 YG1_PR( Yi, YTemps-8) += Ytbeta[8];
	 YG1_PR( Yi, YTemps-9) += Ytbeta[9];
	 YG1_PR( Yi, YTemps-10) += Ytbeta[10];
	 YG1_PR( Yi, YTemps-11) += Ytbeta[11];
	 YG1_PR( Yi, YTemps-12) += Ytbeta[12];
	 YG1_PR( Yi, YTemps-13) += Ytbeta[13];
	 YG1_PR( Yi, YTemps-14) += Ytbeta[14];
	 YG1_PR( Yi, YTemps-15) += Ytbeta[15];
	 YG1_PR( Yi, YTemps-16) += Ytbeta[16];
	 YG1_PR( Yi, YTemps-17) += Ytbeta[17];
	 YG1_PR( Yi, YTemps-18) += Ytbeta[18];
	 YG1_PR( Yi, YTemps-19) += Ytbeta[19];
	 YG1_PR( Yi, YTemps-20) += Ytbeta[20];
	 YG1_PR( Yi, YTemps-21) += Ytbeta[21];
	 YG1_PR( Yi, YTemps-22) += Ytbeta[22];
	 YG1_PR( Yi, YTemps-23) += Ytbeta[23];
	 YG1_PR( Yi, YTemps-24) += Ytbeta[24];
	 YG1_PR( Yi, YTemps-25) += Ytbeta[25];
	 YG1_PR( Yi, YTemps-26) += Ytbeta[26];
	 YG1_PR( Yi, YTemps-27) += Ytbeta[27];
	 YG1_PR( Yi, YTemps-28) += Ytbeta[28];
	 YG1_PR( Yi, YTemps-29) += Ytbeta[29];
	 YG1_X4( Yi) += Ytbeta[30];
	 if (Ytestad_module) {
			Yting[0]=YD1_PR( Yi, YTemps);
			Yting[1]=YD1_PR( Yi, YTemps-1);
			Yting[2]=YD1_PR( Yi, YTemps-2);
			Yting[3]=YD1_PR( Yi, YTemps-3);
			Yting[4]=YD1_PR( Yi, YTemps-4);
			Yting[5]=YD1_PR( Yi, YTemps-5);
			Yting[6]=YD1_PR( Yi, YTemps-6);
			Yting[7]=YD1_PR( Yi, YTemps-7);
			Yting[8]=YD1_PR( Yi, YTemps-8);
			Yting[9]=YD1_PR( Yi, YTemps-9);
			Yting[10]=YD1_PR( Yi, YTemps-10);
			Yting[11]=YD1_PR( Yi, YTemps-11);
			Yting[12]=YD1_PR( Yi, YTemps-12);
			Yting[13]=YD1_PR( Yi, YTemps-13);
			Yting[14]=YD1_PR( Yi, YTemps-14);
			Yting[15]=YD1_PR( Yi, YTemps-15);
			Yting[16]=YD1_PR( Yi, YTemps-16);
			Yting[17]=YD1_PR( Yi, YTemps-17);
			Yting[18]=YD1_PR( Yi, YTemps-18);
			Yting[19]=YD1_PR( Yi, YTemps-19);
			Yting[20]=YD1_PR( Yi, YTemps-20);
			Yting[21]=YD1_PR( Yi, YTemps-21);
			Yting[22]=YD1_PR( Yi, YTemps-22);
			Yting[23]=YD1_PR( Yi, YTemps-23);
			Yting[24]=YD1_PR( Yi, YTemps-24);
			Yting[25]=YD1_PR( Yi, YTemps-25);
			Yting[26]=YD1_PR( Yi, YTemps-26);
			Yting[27]=YD1_PR( Yi, YTemps-27);
			Yting[28]=YD1_PR( Yi, YTemps-28);
			Yting[29]=YD1_PR( Yi, YTemps-29);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[30]=YD1_X4( Yi, 0);
			YLTRes = Yprosca(&YD1Y_Q9, &YG1Y_Q9, YNBS_Q9);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_Q9);
			if (!Ytesterrad_mod("Q9", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS1_MS24( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YPR(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_PR, YNBI_PR, YMAX_JAC_NBI, &YG1Y_PR, Yjac[0], Ytbeta);
	 YG1_INTERC( Yi, YTemps) += Ytbeta[0];
	 YG1_PS3( Yi, YTemps) += Ytbeta[1];
	 YG1_MS24( Yi, YTemps) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_INTERC( Yi, YTemps);
			Yting[1]=YD1_PS3( Yi, YTemps);
			Yting[2]=YD1_MS24( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_PR, &YG1Y_PR, YNBS_PR);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PR);
			if (!Ytesterrad_mod("PR", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS24( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS3(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_MS3, YNBI_MS3, YMAX_JAC_NBI, &YG1Y_MS3, Yjac[0], Ytbeta);
	 YG1_MS1( Yi, YTemps) += Ytbeta[0];
	 YG1_MS24( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_MS1( Yi, YTemps);
			Yting[1]=YD1_MS24( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_MS3, &YG1Y_MS3, YNBS_MS3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS3);
			if (!Ytesterrad_mod("MS3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_MS21( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS24(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_MS24, YNBI_MS24, YMAX_JAC_NBI, &YG1Y_MS24, Yjac[0], Ytbeta);
	 YG1_MS1( Yi, YTemps) += Ytbeta[0];
	 YG1_MS21( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_MS1( Yi, YTemps);
			Yting[1]=YD1_MS21( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_MS24, &YG1Y_MS24, YNBS_MS24);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS24);
			if (!Ytesterrad_mod("MS24", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS23( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS21(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_MS21, YNBI_MS21, YMAX_JAC_NBI, &YG1Y_MS21, Yjac[0], Ytbeta);
	 YG1_MS23( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_MS23( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_MS21, &YG1Y_MS21, YNBS_MS21);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS21);
			if (!Ytesterrad_mod("MS21", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS1( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS23(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_MS23, YNBI_MS23, YMAX_JAC_NBI, &YG1Y_MS23, Yjac[0], Ytbeta);
	 YG1_MS1( Yi, YTemps) += Ytbeta[0];
	 YG1_X1( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_MS1( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X1( Yi, 0);
			YLTRes = Yprosca(&YD1Y_MS23, &YG1Y_MS23, YNBS_MS23);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS23);
			if (!Ytesterrad_mod("MS23", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_PS3( Yi, YTemps);
	 Yting[2]=YS2_PS3( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YMS1(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_MS1, YNBI_MS1, YMAX_JAC_NBI, &YG1Y_MS1, Yjac[0], Ytbeta);
	 YG1_MS3( Yi, YTemps-1) += Ytbeta[0];
	 YG1_PS3( Yi, YTemps) += Ytbeta[1];
	 YG2_PS3( Yi, YTemps) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_MS3( Yi, YTemps-1);
			Yting[1]=YD1_PS3( Yi, YTemps);
			Yting[2]=YD2_PS3( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_MS1, &YG1Y_MS1, YNBS_MS1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_MS1);
			if (!Ytesterrad_mod("MS1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PS1( Yi, YTemps);
	 Yting[1]=YS2_PS1( Yi, YTemps);
	 Yting[2]=YS1_PS2( Yi, YTemps);
	 Yting[3]=YS2_PS2( Yi, YTemps);
	 Yting[4]=YS1_INTERC( Yi, YTemps);
	 memset(Yjac, 0, 62*sizeof(double));
	 YPS3(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmatt (YNBS_PS3, YNBI_PS3, YMAX_JAC_NBI, &YG1Y_PS3, Yjac[0], Ytbeta);
	 YG1_PS1( Yi, YTemps) += Ytbeta[0];
	 YG2_PS1( Yi, YTemps) += Ytbeta[1];
	 YG1_PS2( Yi, YTemps) += Ytbeta[2];
	 YG2_PS2( Yi, YTemps) += Ytbeta[3];
	 YG1_INTERC( Yi, YTemps) += Ytbeta[4];
	 if (Ytestad_module) {
			Yting[0]=YD1_PS1( Yi, YTemps);
			Yting[1]=YD2_PS1( Yi, YTemps);
			Yting[2]=YD1_PS2( Yi, YTemps);
			Yting[3]=YD2_PS2( Yi, YTemps);
			Yting[4]=YD1_INTERC( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_PS3, &YG1Y_PS3, YNBS_PS3);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PS3);
			if (!Ytesterrad_mod("PS3", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_SX1( Yi, YTemps);
	 Yting[1]=YS1_tanhPS( Yi, YTemps);
	 Yting[2]=YS1_tanhES( Yi, YTemps);
	 memset(Yjac, 0, 62*sizeof(double));
	 YPS2(Yi)->backward( Yting[0], Yting[1], Yting[2] );
	 Yvsmatt (YNBS_PS2, YNBI_PS2, YMAX_JAC_NBI, &YG1Y_PS2, Yjac[0], Ytbeta);
	 YG1_SX1( Yi, YTemps) += Ytbeta[0];
	 YG1_tanhPS( Yi, YTemps) += Ytbeta[1];
	 YG1_tanhES( Yi, YTemps) += Ytbeta[2];
	 if (Ytestad_module) {
			Yting[0]=YD1_SX1( Yi, YTemps);
			Yting[1]=YD1_tanhPS( Yi, YTemps);
			Yting[2]=YD1_tanhES( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_PS2, &YG1Y_PS2, YNBS_PS2);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PS2);
			if (!Ytesterrad_mod("PS2", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_SX1( Yi, YTemps);
	 Yting[2]=YS1_tanhPS( Yi, YTemps);
	 Yting[3]=YS1_tanhES( Yi, YTemps);
	 Yting[4]=YS1_X1( Yi);
	 memset(Yjac, 0, 62*sizeof(double));
	 YPS1(Yi)->backward( Yting[0], Yting[1], Yting[2], Yting[3], Yting[4] );
	 Yvsmatt (YNBS_PS1, YNBI_PS1, YMAX_JAC_NBI, &YG1Y_PS1, Yjac[0], Ytbeta);
	 YG1_MS3( Yi, YTemps-1) += Ytbeta[0];
	 YG1_SX1( Yi, YTemps) += Ytbeta[1];
	 YG1_tanhPS( Yi, YTemps) += Ytbeta[2];
	 YG1_tanhES( Yi, YTemps) += Ytbeta[3];
	 YG1_X1( Yi) += Ytbeta[4];
	 if (Ytestad_module) {
			Yting[0]=YD1_MS3( Yi, YTemps-1);
			Yting[1]=YD1_SX1( Yi, YTemps);
			Yting[2]=YD1_tanhPS( Yi, YTemps);
			Yting[3]=YD1_tanhES( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[4]=YD1_X1( Yi, 0);
			YLTRes = Yprosca(&YD1Y_PS1, &YG1Y_PS1, YNBS_PS1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PS1);
			if (!Ytesterrad_mod("PS1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_ENX1( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YtanhES(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_tanhES, YNBI_tanhES, YMAX_JAC_NBI, &YG1Y_tanhES, Yjac[0], Ytbeta);
	 YG1_ENX1( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_ENX1( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_tanhES, &YG1Y_tanhES, YNBS_tanhES);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_tanhES);
			if (!Ytesterrad_mod("tanhES", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_PNX1( Yi, YTemps);
	 memset(Yjac, 0, 31*sizeof(double));
	 YtanhPS(Yi)->backward( Yting[0] );
	 Yvsmatt (YNBS_tanhPS, YNBI_tanhPS, YMAX_JAC_NBI, &YG1Y_tanhPS, Yjac[0], Ytbeta);
	 YG1_PNX1( Yi, YTemps) += Ytbeta[0];
	 if (Ytestad_module) {
			Yting[0]=YD1_PNX1( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_tanhPS, &YG1Y_tanhPS, YNBS_tanhPS);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_tanhPS);
			if (!Ytesterrad_mod("tanhPS", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS2_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YENX1(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_ENX1, YNBI_ENX1, YMAX_JAC_NBI, &YG1Y_ENX1, Yjac[0], Ytbeta);
	 YG2_INTERC( Yi, YTemps) += Ytbeta[0];
	 YG1_X1( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD2_INTERC( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X1( Yi, 0);
			YLTRes = Yprosca(&YD1Y_ENX1, &YG1Y_ENX1, YNBS_ENX1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_ENX1);
			if (!Ytesterrad_mod("ENX1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_INTERC( Yi, YTemps);
	 Yting[1]=YS1_X1( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YPNX1(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_PNX1, YNBI_PNX1, YMAX_JAC_NBI, &YG1Y_PNX1, Yjac[0], Ytbeta);
	 YG1_INTERC( Yi, YTemps) += Ytbeta[0];
	 YG1_X1( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_INTERC( Yi, YTemps);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X1( Yi, 0);
			YLTRes = Yprosca(&YD1Y_PNX1, &YG1Y_PNX1, YNBS_PNX1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_PNX1);
			if (!Ytesterrad_mod("PNX1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_MS3( Yi, YTemps-1);
	 Yting[1]=YS1_X1( Yi);
	 memset(Yjac, 0, 31*sizeof(double));
	 YSX1(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_SX1, YNBI_SX1, YMAX_JAC_NBI, &YG1Y_SX1, Yjac[0], Ytbeta);
	 YG1_MS3( Yi, YTemps-1) += Ytbeta[0];
	 YG1_X1( Yi) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_MS3( Yi, YTemps-1);
			Ytps = Ytttt_pdt(0, YTemps, YidTraj);
			Yting[1]=YD1_X1( Yi, 0);
			YLTRes = Yprosca(&YD1Y_SX1, &YG1Y_SX1, YNBS_SX1);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_SX1);
			if (!Ytesterrad_mod("SX1", YLTRes,YAdRes)) return(0);
	 }
	 Yting[0]=YS1_P( Yi, YTemps);
	 Yting[1]=YS1_E( Yi, YTemps);
	 memset(Yjac, 0, 62*sizeof(double));
	 YINTERC(Yi)->backward( Yting[0], Yting[1] );
	 Yvsmatt (YNBS_INTERC, YNBI_INTERC, YMAX_JAC_NBI, &YG1Y_INTERC, Yjac[0], Ytbeta);
	 YG1_P( Yi, YTemps) += Ytbeta[0];
	 YG1_E( Yi, YTemps) += Ytbeta[1];
	 if (Ytestad_module) {
			Yting[0]=YD1_P( Yi, YTemps);
			Yting[1]=YD1_E( Yi, YTemps);
			YLTRes = Yprosca(&YD1Y_INTERC, &YG1Y_INTERC, YNBS_INTERC);
			YAdRes = Yprosca(Yting, Ytbeta, YNBI_INTERC);
			if (!Ytesterrad_mod("INTERC", YLTRes,YAdRes)) return(0);
	 }

}

	 return(0);
}

int Yforward_traj_Tm(int nbp)
{
	Ycurward=FORWARD;
	 Yforward_space_Sm();
	 return(0);
}

int Ylinward_traj_Tm(int nbp)
{
	Ycurward=LINWARD;
	 Ylinward_space_Sm();
	 return(0);
}

int Ydfward_traj_Tm(int modop, char *nmmod, int All, int KeKo, int koleft,float pdx, float ptol, int yi, int yj, int yk)
{
	 int nbko=0;
	 if (!Ydftesttt(1)) return(0);
	 nbko += Ydfward_space_Sm(modop, nmmod, All, KeKo, koleft, pdx, ptol, yi, yj, yk);
	 return(nbko);
}

int Ydfward_traj_maille_Tm(int modop, char *nmmod, int All, int KeKo,  float pdx, float ptol)
{
	 int nbko=0;
	 if (!Ydftesttt(1)) return(0);
	 nbko += Ydfward_space_maille_Sm(modop, nmmod, All, KeKo, pdx, ptol);
	 return(nbko);
}

int Ybackward_traj_Tm(int nbp)
{
	Ycurward=BACKWARD;
	 Ybackward_space_Sm();
	 return(0);
}

int Yforward_order()
{
	 Yforward_traj_Tm(0);
	 return(0);
}

int Ylinward_order()
{
	 Ylinward_traj_Tm(0);
	 return(0);
}

int Ydfward_order(int modop, char *nmmod, int All, int KeKo, int koleft, float pdx, float ptol, int yi, int yj, int yk)
{
	 int nbko=0;
	 nbko += Ydfward_traj_Tm(modop, nmmod, All, KeKo, koleft, pdx, ptol, yi, yj, yk);
	 return(nbko);
}

int Ydfward_order_maille(int modop, char *nmmod, int All, int KeKo,  float pdx, float ptol)
{
	 int nbko=0;
	 nbko += Ydfward_traj_maille_Tm(modop, nmmod, All, KeKo, pdx, ptol);
	 return(nbko);
}

int Ybackward_order()
{
	 Ybackward_traj_Tm(0);
	 return(0);
}

void Yforward_operator (char type) 
{	
}
void Ylinward_operator (char type) 
{	
}
void Ybackward_operator (char type) 
{	
}

// ¤ ¤ ¤ ¤ ¤ ¤ ¤ ¤ LES FONCTIONS UTILISATEUR ... : 
int Yuser_call (int argc, char *argv[]) 
{
	 int codret=1;
	 if (strcmp(argv[0], "xdisplay") == 0)
		 xdisplay();
	 else if (strcmp(argv[0], "init") == 0)
		 init(argc, argv);
	 else codret=0;
	 return(codret);
}

//-------------- end Yao generation -----------------
